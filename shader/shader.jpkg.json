{"additive_uvroll.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nin vec2 v_uv;\r\n\r\nuniform vec4 _TintColor;\r\nuniform sampler2D _MainTex;\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    color = 2.0 * _TintColor * texture(_MainTex, v_uv);\r\n}","additive_uvroll.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"additive_uvroll\",\r\n        \"fs\": \"additive_uvroll\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"additive_uvroll\",\r\n        \"fs\": \"additive_uvroll\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","additive_uvroll.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;  \r\n\r\n//坐标属性\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform float _UVSpeedX;\r\nuniform float _UVSpeedY;\r\nuniform float glstate_timer;\r\n\r\nout vec4 v_color;\r\nout vec2 v_uv;\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n    //输出uv\r\n    v_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw + vec2(_UVSpeedX,_UVSpeedY) * glstate_timer;\r\n\r\n    //计算投影坐标\r\n    gl_Position = glstate_matrix_mvp * position;\r\n}","alphablended_uvroll.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"additive_uvroll\",\r\n        \"fs\": \"additive_uvroll\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"additive_uvroll\",\r\n        \"fs\": \"additive_uvroll\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","asi.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;  \r\nuniform lowp sampler2D _asm;\r\nuniform lowp sampler2D _streamlight;\r\nuniform lowp float _LightRate;\r\nuniform lowp vec4 _LightColor;\r\nuniform lowp float _emitpow;\r\nuniform lowp float _diffuse;\r\n//uniform highp float _Cutoff;\r\n\r\n\r\nin mediump vec2 _base_uv;\r\nin mediump vec2 _asm_uv;\r\nin mediump vec2 _light_uv;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    \r\n    lowp vec4 baseTex=texture(_MainTex,_base_uv);\r\n    if(baseTex.a<0.5)\r\n    {\r\n        discard;\r\n    }\r\n    lowp vec3 asi=texture(_asm,_asm_uv).rgb;\r\n    lowp vec3 d_color=baseTex.rgb*_diffuse;\r\n    lowp vec3 e_color=baseTex.rgb*_emitpow*asi.g;\r\n    lowp vec3 light = texture(_streamlight, _light_uv).rgb* _LightRate*_LightColor.xyz;\r\n    light = min(light,asi.b);\r\n    light = light*_LightRate*_LightColor.xyz;\r\n    lowp vec4 emission=vec4(d_color+e_color+light,1.0);\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    color = emission;\r\n}\r\n\r\n","asi.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","asi.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _asm_ST;\r\nuniform mediump vec4 _streamlight_ST;\r\nuniform lowp float _speedu;\r\nuniform lowp float _speedv;\r\nuniform lowp float glstate_timer;\r\n\r\nout mediump vec2 _base_uv;\r\nout mediump vec2 _asm_uv;\r\nout mediump vec2 _light_uv;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\nvoid main()\r\n{\r\n\thighp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n\t_base_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\t_asm_uv = _glesMultiTexCoord0.xy * _asm_ST.xy + _asm_ST.zw;\r\n\tlowp vec2 _speed;\r\n    _speed = vec2(_speedu,_speedv);\r\n    _light_uv = (_glesMultiTexCoord0.xy * _streamlight_ST.xy + _streamlight_ST.zw)  + _speed * glstate_timer;\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\tgl_Position = position;\r\n}\r\n\r\n","barrel_blur.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D _MainTex;\r\nuniform float _Power;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\nconst int num_iter = 20;\r\n\r\n//texture2DEtC1Mark\r\n\r\nvec2 barrelDistortion(vec2 coord, float amt)\r\n{\r\n    vec2 cc = coord - 0.5;\r\n    float dist = dot(cc, cc);\r\n    return coord + cc * dist * amt;\r\n}\r\n\r\nfloat linterp(float t)\r\n{\r\n    return clamp(1.0 - abs(2.0 * t - 1.0), 0.0, 1.0);\r\n}\r\n\r\nfloat remap (float t, float a, float b)\r\n{\r\n    return clamp((t - a) / (b - a), 0.0, 1.0);\r\n}\r\n\r\nvec3 spectrum_offset(float t)\r\n{\r\n    vec3 ret;\r\n    float lo = step(t, 0.5);\r\n    float hi = 1.0 - lo;\r\n    float w = linterp(remap(t, 1.0 / 6.0, 5.0 / 6.0));\r\n    ret = vec3(lo, 1.0, hi) * vec3(1.0 - w, w, 1.0 - w);\r\n    return pow(ret, vec3(1.0 / 2.2));\r\n}\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    vec2 uv = xlv_TEXCOORD0.xy;\r\n    vec3 sumcol = vec3(0.0);\r\n    vec3 sumw = vec3(0.0);\r\n    float reci_num_iter_f = 1.0 / float(num_iter);\r\n    for (int i = 0; i < num_iter; i++)\r\n    {\r\n        float t = float(i) * reci_num_iter_f;\r\n        vec3 w = spectrum_offset(t);\r\n        sumw += w;\r\n        sumcol += w * texture(_MainTex, barrelDistortion(uv, _Power * t)).rgb;\r\n    }\r\n\r\n    color = vec4(sumcol.rgb / sumw, 1.0);\r\n}","barrel_blur.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Power('Power',Float)=0.5\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"barrel_blur\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"barrel_blur\"\r\n            }\r\n        ]\r\n    }\r\n}","blendnotest.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;   \r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\n\r\nout lowp vec4 xlv_COLOR;\r\nout mediump vec2 xlv_TEXCOORD0;                \r\nvoid main()                                     \r\n{                                               \r\n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\r\n    xlv_COLOR = vec4(1.0,1.0,1.0,1.0);\r\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n                \r\n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \r\n}","blend_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t    \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"ccw\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"blendnotest\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","bloom.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D       _MainTex;//清晰图\r\nuniform sampler2D       _BlurTex;//模糊高光的图\r\nuniform highp vec4      _MainTex_TexelSize;\r\n\r\nuniform highp float     _bloomIntensity;\r\n// 强度 - 附加光（影响到该特效的光源）的全局光强\r\nuniform highp vec4     _blurSpread;\r\n// 模糊扩散 - Frag down sample 的偏移距离\r\nuniform highp float     _bloomThreshold;\r\n// 阈值 - 图像中亮度高于该阈值的区域将产生泛光效果\r\n\r\nin highp vec2      xlv_TEXCOORD0;   // 每个片元的纹素坐标\r\n\r\n#define INTENSITY       _bloomIntensity\r\n#define THRESHOLD       _bloomThreshold\r\n#define BLUR_SPREAD     vec2(_blurSpread.xy * _MainTex_TexelSize.xy)\r\n\r\n#define tex(t, uv)      texture((t), (uv))\r\n\r\n//texture2DEtC1Mark\r\n\r\nfloat luminance(vec3 rgb) {\r\n    const vec3 w = vec3(0.2125, 0.7154, 0.0721);\r\n    return dot(rgb, w);\r\n}\r\n// Blur spread 扩撒\r\nvec4 fragDownsample(sampler2D image, vec2 uv) {\r\n    vec2 uv2[4];\r\n    uv2[0] = uv + _MainTex_TexelSize.xy * vec2(1.5, 1.5);\r\n    uv2[1] = uv + _MainTex_TexelSize.xy * vec2(-1.5, 1.5);\r\n    uv2[2] = uv + _MainTex_TexelSize.xy * vec2(-1.5, -1.5);\r\n    uv2[3] = uv + _MainTex_TexelSize.xy * vec2(1.5, -1.5);\r\n    vec4 color;\r\n    color += texture(image, uv2[0]);\r\n    color += texture(image, uv2[1]);\r\n    color += texture(image, uv2[2]);\r\n    color += texture(image, uv2[3]);\r\n    return max(color/4.0 - THRESHOLD, vec4(0.0)) * INTENSITY;\r\n}\r\nvec4 fastBlur(sampler2D image, vec2 uv, vec2 netFilterWidth) {\r\n\r\n    vec4 blur = vec4(0.0);\r\n    vec2 _offset[7];\r\n    vec4 curve[7];\r\n    curve[0] = vec4(0.0205, 0.0205, 0.0205, 0.0);\r\n    curve[1] = vec4(0.0855, 0.0855, 0.0855, 0.0);\r\n    curve[2] = vec4(0.232, 0.232, 0.232, 0.0);\r\n    curve[3] = vec4(0.324, 0.324, 0.324, 1.0);\r\n    curve[4] = vec4(0.232, 0.232, 0.232, 0.0);\r\n    curve[5] = vec4(0.0855, 0.0855, 0.0855, 0.0);\r\n    curve[6] = vec4(0.0205, 0.0205, 0.0205, 0.0);\r\n    // horizontal or vertical blur, defined by netFilterWidth vector\r\n    _offset[0] = uv + netFilterWidth * 3.0;\r\n    _offset[1] = uv + netFilterWidth * 2.0;\r\n    _offset[2] = uv + netFilterWidth;\r\n    _offset[3] = uv;\r\n    _offset[4] = uv - netFilterWidth;\r\n    _offset[5] = uv - netFilterWidth * 2.0;\r\n    _offset[6] = uv - netFilterWidth * 3.0;\r\n    for(int l = 0; l < 7; l++) {\r\n        blur += tex(image, _offset[l]) * curve[l];\r\n    }\r\n\r\n    return blur;\r\n}\r\n\r\nout vec4 color; \r\nvoid main () {\r\n    if(BLUR_SPREAD.x == 0.0 && BLUR_SPREAD.y == 0.0) {    // 不泛光, 只过滤\r\n        color = fragDownsample(_MainTex, xlv_TEXCOORD0);\r\n    } else if(THRESHOLD == 1.0){    // 不过滤, 只泛光\r\n        color = fastBlur(_MainTex, xlv_TEXCOORD0, BLUR_SPREAD);\r\n    } else {    // Final Composition\r\n        vec4 originColor = texture(_MainTex, xlv_TEXCOORD0);\r\n        originColor = vec4(originColor.rgb * INTENSITY, originColor.a);\r\n        vec4 bloomColor = texture(_BlurTex, xlv_TEXCOORD0);\r\n        color = originColor + bloomColor;\r\n    }\r\n\r\n    // vec4 c = texture(_MainTex, xlv_TEXCOORD0);\r\n    // vec4 cur_color;\r\n    // cur_color = fastBlur(_MainTex, xlv_TEXCOORD0,BLUR_SPREAD);\r\n    //\r\n    // c = vec4(c.rgb * INTENSITY, c.a) / 2.0;\r\n    // color = c;\r\n}\r\n","bloom.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_bloomFactor('bloomFactor',Range(0.0,1.0)) = 2.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"bloom\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"bloom\"\r\n            }\r\n        ]\r\n    }\r\n}","blur.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform lowp float _BlurGap; //卷积每层间隔单位\r\nuniform highp vec4 _MainTex_TexelSize;\r\nin highp vec2 xlv_TEXCOORD0;\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n\tlowp float offset_x = _MainTex_TexelSize.x * _BlurGap;\r\n\tlowp float offset_y = _MainTex_TexelSize.y * _BlurGap;\r\n    highp vec4 sample0,sample1,sample2,sample3;\r\n\tsample0=texture(_MainTex,vec2(xlv_TEXCOORD0.x-offset_x,xlv_TEXCOORD0.y-offset_y));\r\n\tsample1=texture(_MainTex,vec2(xlv_TEXCOORD0.x+offset_x,xlv_TEXCOORD0.y-offset_y));\r\n\tsample2=texture(_MainTex,vec2(xlv_TEXCOORD0.x+offset_x,xlv_TEXCOORD0.y+offset_y));\r\n\tsample3=texture(_MainTex,vec2(xlv_TEXCOORD0.x-offset_x,xlv_TEXCOORD0.y+offset_y));\r\n\thighp vec4 _color=(sample0+sample1+sample2+sample3) / 4.0;\r\n    color = _color;\r\n}","blur.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_BlurGap('_BlurGap',float)=1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"blur\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"blur\"\r\n            }\r\n        ]\r\n    }\r\n}","contort.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nconst float PI = 3.14159265;\r\nuniform sampler2D _MainTex;\r\nuniform float _UD;\r\nuniform float _UR;\r\nin highp vec2 xlv_TEXCOORD0;\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    ivec2 ires = ivec2(1024, 1024);\r\n    float Res = float(ires.s);\r\n\r\n    vec2 st = xlv_TEXCOORD0;\r\n    float Radius = Res * _UR;\r\n    vec2 xy = Res * st;\r\n\r\n    vec2 dxy = xy - vec2(Res / 2.0, Res / 2.0);\r\n    float r = length(dxy);\r\n    float beta = atan(dxy.y, dxy.x) + radians(_UD) * 2.0 * (Radius - r) / Radius;\r\n\r\n    vec2 xy1 = xy;\r\n    if (r <= Radius)\r\n    {\r\n        xy1 = Res / 2.0 + r * vec2(cos(beta), sin(beta));\r\n    }\r\n    st = xy1 / Res;\r\n\r\n    vec3 irgb = texture(_MainTex, st).rgb;\r\n\r\n    color = vec4(irgb, 1.0);\r\n}","contort.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_UD('UD',float)=90\",\r\n        \"_UR('UR',float)=0.2\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"contort\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"contort\"\r\n            }\r\n        ]\r\n    }\r\n}","demo_gpu_ins.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nin lowp vec4 xlv_COLOR;\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    color = xlv_COLOR;\r\n}","demo_gpu_ins.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\n#ifdef INSTANCE\r\n//instance_matrix 固定地址\r\nlayout(location = 12) in highp mat4 instance_matrix;\r\n//其他自定义字段\r\nin vec4 a_particle_color;\r\n#else\r\nuniform vec4 a_particle_color;\r\n#endif\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nout lowp vec4 xlv_COLOR;\r\nvoid main()\r\n{\r\n    highp vec4 tmpvar_1;\r\n    tmpvar_1.xyz = _glesVertex.xyz;\r\n    tmpvar_1.w = 1.0;\r\n    #ifdef INSTANCE\r\n        tmpvar_1 = instance_matrix * tmpvar_1;\r\n    #endif\r\n\r\n    xlv_COLOR = a_particle_color;\r\n\r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\r\n}","demo_gpu_instancing.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n     \r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"demo_gpu_ins\",\r\n                \"fs\": \"demo_gpu_ins\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"demo_gpu_ins\",\r\n                \"fs\": \"demo_gpu_ins\"\r\n            }\r\n        ],\r\n        \"instance\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"demo_gpu_ins\",\r\n                \"fs\": \"demo_gpu_ins\"\r\n            }\r\n        ],\r\n        \"instance_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"demo_gpu_ins\",\r\n                \"fs\": \"demo_gpu_ins\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\nin mediump vec2 xlv_TEXCOORD0;\r\n\r\n//light\r\nlowp vec4 xlv_COLOR = vec4(0.0,0.0,0.0,1.0); \r\nbool hasLight = false;\r\nlowp vec3 fixedAmbient = vec3(0.6,0.6,0.6);\r\nuniform lowp float glstate_lightcount;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp vec4 glstate_vec4_lightcolors[8];\r\nuniform lowp float glstate_float_lightrange[8];\r\nuniform lowp float glstate_float_lightintensity[8];\r\n\r\nin lowp vec3 v_N;\r\nin lowp vec3 v_Mpos;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp float glstate_lightmapRGBAF16;\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//calcDiffuse 计算漫反射强度函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot,lowp float range )\r\n{\r\n    lowp vec3 v3 = lightPos.xyz - worldpos;\r\n    lowp float len = length(v3);\r\n    len = len > range ? range : len;\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(v3); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0) * pow(1.0 - len/range,2.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n    return diffuse;\r\n}\r\n\r\nvoid calcCOLOR(){\r\n    int c =int(glstate_lightcount);\r\n\tif(c>0){\r\n        hasLight = true;\r\n        lowp float diff=0.0;\r\n\t\t//calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\r\n\t\tfor(int i=0;i<8;i++)\r\n\t\t{\r\n\t\t\tif(i>=c)break;\r\n\t\t\t//diff += calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n\t\t\tdiff = calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n            xlv_COLOR += glstate_float_lightintensity[i] * glstate_vec4_lightcolors[i] * diff;\r\n\t\t}\r\n\t\txlv_COLOR.w = 1.0;  \r\n    }\r\n}\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    //----------------------------------------------------------\r\n    //light\r\n    calcCOLOR();\r\n    \r\n#ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    if(glstate_lightmapRGBAF16 == 1.0){\r\n        emission.xyz *= lightmap.xyz;\r\n    }else{\r\n        emission.xyz *= decode_hdr(lightmap);\r\n    }\r\n    if(hasLight){ // have light\r\n        fristColor = fristColor * xlv_COLOR ;\r\n        emission = emission + mix(vec4(1.0, 1.0, 1.0, 1.0), fristColor, fristColor.wwww);\r\n    }\r\n#else\r\n\tif(hasLight){ // have light\r\n        emission = (fristColor * xlv_COLOR) + (fristColor * vec4(fixedAmbient,1.0));\r\n    }\r\n#endif\r\n\r\n#ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n#endif\r\n    \r\n    color = emission;\r\n}","diffuse.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_SkinTex('_SkinTex',Texture)='white'{}\",\r\n        \"_SkinTexMeta('_SkinTexMeta',Vector)=(55,0,1,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"instance\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"instance_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skinTex\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skinTex_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n//light\r\nlowp mat4 blendMat ;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform lowp float glstate_lightcount;\r\n\r\nout highp vec3 v_N;\r\nout highp vec3 v_Mpos;\r\n\r\n#ifdef INSTANCE\r\n//instance_matrix 固定地址\r\nlayout(location = 12) in highp mat4 instance_matrix;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec2 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nuniform lowp float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\n\r\n#ifdef SKIN_BONE_ARR\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n#endif\r\n\r\n#ifdef SKIN_BONE_TEX\r\nuniform highp sampler2D _SkinTex;\r\nuniform highp vec4 _SkinTexMeta;//bonecount,frameid,framecount\r\n\r\nmat4 skinTexBuildMat4(int index)\r\n{\r\n\tvec4 quat = texture(_SkinTex, vec2((float(index*2) + 0.5)/(_SkinTexMeta.x*2.0), (0.5+_SkinTexMeta.y)/_SkinTexMeta.z));\r\n\tvec4 translation =texture(_SkinTex, vec2((float(index*2) + 1.5)/(_SkinTexMeta.x*2.0), (0.5+_SkinTexMeta.y)/_SkinTexMeta.z));\r\n\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 skinTexCalcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = skinTexBuildMat4(i)*blendWeight.x\r\n\t\t\t + skinTexBuildMat4(i2)*blendWeight.y\r\n\t\t\t + skinTexBuildMat4(i3)*blendWeight.z\r\n\t\t\t + skinTexBuildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n#endif\r\n\r\n#endif\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n\tint c =int(glstate_lightcount);\r\n\tif(c>0){\r\n\t\t//求世界空间法线\r\n\t\t#ifdef SKIN\r\n\t\tv_N = normalize(mat3(blendMat) * _glesNormal);\r\n\t\t#else\r\n\t\tv_N = _glesNormal;\r\n\t\t#endif\r\n\t\tlowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\t\tv_N =normalize(normalmat*v_N);\r\n\t\tv_Mpos =(glstate_matrix_model * pos).xyz;\r\n\t}\r\n}\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = (1.0 - glstate_lightmapUV) * _glesMultiTexCoord0  + glstate_lightmapUV * _glesMultiTexCoord1;\t//unity lightMap UV ,优先使用UV1,次之UV0 \r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n\t\t#ifdef SKIN_BONE_ARR\r\n\t\tposition =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n\t\t#endif\r\n\t\t#ifdef SKIN_BONE_TEX\r\n\t\tposition =skinTexCalcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n\t\t#endif\r\n\t#endif\r\n\t//light\r\n    calcNormal(position);\r\n\r\n\t#ifdef INSTANCE\r\n        position = instance_matrix * position;\r\n    #endif\r\n\t\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","diffuse_bothside.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse_nolight.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\nin mediump vec2 xlv_TEXCOORD0;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    //----------------------------------------------------------\r\n    \r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    color = emission;\r\n}","diffuse_nolight.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse_nolight.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4    _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n\tlowp mat4 blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","diffuse_nolight_bothside.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","dof.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\n\r\nuniform sampler2D _MainTex;//清晰图\r\nuniform sampler2D _BlurTex;//模糊的图\r\nuniform sampler2D _DepthTex;//深度图\r\n\r\nuniform highp float _focalDistance;//焦点位置\r\nuniform highp float _farBlurScale;\r\nuniform highp float _nearBlurScale;\r\n\r\n\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\nconst highp float UnpackDownscale = 255. / 256.; \r\n// 0..1 -> fraction (excluding 1)\r\nconst highp vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst highp vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\nhighp float unpackRGBAToDepth( const in vec4 v ) \r\n{\r\n    return dot( v, UnpackFactors );\r\n}\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n\tlowp vec4 basecolor =texture(_MainTex,xlv_TEXCOORD0);\r\n    lowp vec4 blurcolor=texture(_BlurTex,xlv_TEXCOORD0);\r\n    lowp vec4 depthcolor=texture(_DepthTex,xlv_TEXCOORD0);\r\n    highp float depth=unpackRGBAToDepth(depthcolor);\r\n\r\n\r\n    lowp vec4 finalcolor=basecolor;\r\n    if(depth>_focalDistance)\r\n    {\r\n        depth=clamp((depth-_focalDistance)*_farBlurScale,0.0,1.0);\r\n        finalcolor=mix(basecolor,blurcolor,depth);\r\n        //finalcolor=mix(blurcolor,basecolor,1.0);//为1的时候取basecolor\r\n        //finalcolor=vec4(depth,depth,depth,1.0);\r\n    }\r\n    color = finalcolor;\r\n}","dof.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_farBlurScale('farBlurScale',Range(0.0,1.0)) = 1.0\",\r\n        \"_farBlurScale('farBlurScale',Range(0.0,1.0)) = 100.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"dof\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"dof\"\r\n            }\r\n        ]\r\n    }\r\n}","f14trans.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform mediump sampler2D _Main_Tex;\r\n\r\nin lowp vec4 xlv_COLOR;\r\nin mediump vec2 xlv_TEXCOORD0;       \r\n//texture2DEtC1Mark\r\n   \r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture(_Main_Tex, xlv_TEXCOORD0);\r\n    color =basecolor*xlv_COLOR;\r\n    //color =vec4(1,0,0,1);\r\n}","f14trans.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;   \r\nlayout(location = 3) in highp vec4    _glesColor;\r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\n\r\nout lowp vec4 xlv_COLOR;\r\nout mediump vec2 xlv_TEXCOORD0;                \r\nvoid main()                                     \r\n{                                               \r\n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\r\n    xlv_COLOR = _Main_Color*_glesColor;\r\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n                \r\n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \r\n}","f4skin.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\n// in mediump vec2 xlv_TEXCOORD0;\r\n\r\n// #ifdef LIGHTMAP\r\n// uniform lowp sampler2D _LightmapTex;\r\n// in mediump vec2 lightmap_TEXCOORD;\r\n// lowp vec3 decode_hdr(lowp vec4 data)\r\n// {\r\n//     lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n//     return data.rgb * power * 2.0 ;\r\n// }\r\n// #endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nin highp vec4 vcolor;\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    // lowp vec4 basecolor = vec4(1);\r\n    // // lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    // // if(basecolor.a < _AlphaCut)\r\n    // //     discard;\r\n    // lowp vec4 fristColor=basecolor*_MainColor;\r\n    // lowp vec4 emission = fristColor;\r\n\r\n    // //----------------------------------------------------------\r\n\r\n    // // #ifdef LIGHTMAP\r\n    // // lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    // // emission.xyz *= decode_hdr(lightmap);\r\n    // // #endif\r\n\r\n    // #ifdef FOG\r\n    // emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    // #endif\r\n\r\n    color = vec4(pow(vcolor.rgb, vec3(1./2.2)), vcolor.a);\r\n    // color = vec4(1, 0, 0, 1);\r\n}","f4skin.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"boneSampler('MainTex',Texture)='white'{}\",\r\n        \"boneSamplerTexelSize('boneSamplerTexelSize',float)=0.1\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","f4skin.vs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;\r\nlayout(location = 3) in highp vec4    _glesColor;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\n// out mediump vec2 xlv_TEXCOORD0;\r\n\r\n// #ifdef LIGHTMAP\r\n// layout(location = 5) in mediump vec4    _glesMultiTexCoord1;\r\n// uniform mediump vec4 glstate_lightmapOffset;\r\n// // uniform mediump float glstate_lightmapUV;\r\n// out mediump vec2 lightmap_TEXCOORD;\r\n// #endif\r\n\r\n\r\n// NOTE: diffuse cap\r\nout lowp vec3 v_N;\r\nout lowp vec3 v_Mpos;\r\nout mediump vec2 xlv_TEXCOORD0;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#define SKIN2\r\n#define SKIN\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\n\r\n#ifdef SKIN2\r\n// uniform highp mat4 glstate_matrix_bones[24];\r\nuniform highp sampler2D boneSampler;\r\nuniform highp float boneSamplerTexelSize;\r\nuniform highp vec4 boneSampler_TexelSize;\r\n\r\nmat4 readMatrixSampler(sampler2D smp, float index) {\r\n    float offset = index * 4.;\r\n    return mat4(\r\n\t\ttexture(smp, vec2(boneSamplerTexelSize * (offset + 0.5), 0)),\r\n\t\ttexture(smp, vec2(boneSamplerTexelSize * (offset + 1.5), 0)),\r\n\t\ttexture(smp, vec2(boneSamplerTexelSize * (offset + 2.5), 0)),\r\n\t\ttexture(smp, vec2(boneSamplerTexelSize * (offset + 3.5), 0))\r\n\t\t);\r\n}\r\nhighp vec4 calcVertexF4(highp vec4 srcVertex) {\r\n\tmat4 mat = _glesBlendWeight4[0] * readMatrixSampler(boneSampler, _glesBlendIndex4[0])\r\n\t\t\t+ _glesBlendWeight4[1] * readMatrixSampler(boneSampler, _glesBlendIndex4[1])\r\n\t\t\t+ _glesBlendWeight4[2] * readMatrixSampler(boneSampler, _glesBlendIndex4[2])\r\n\t\t\t+ _glesBlendWeight4[3] * readMatrixSampler(boneSampler, _glesBlendIndex4[3]);\r\n\treturn mat * srcVertex;\r\n}\r\n#endif\r\n\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tmat4 matrix = mat4(\r\n\t1.0-yy-zz, xy+zw, xz-yw, 0,\r\n\txy-zw, 1.0-xx-zz, yz + xw, 0,\r\n\txz + yw, yz - xw, 1.0-xx-yy, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n\tlowp mat4 blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nout highp vec4 vcolor;\r\n\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n\tmat4 mat = _glesBlendWeight4[0] * readMatrixSampler(boneSampler, _glesBlendIndex4[0])\r\n\t\t\t+ _glesBlendWeight4[1] * readMatrixSampler(boneSampler, _glesBlendIndex4[1])\r\n\t\t\t+ _glesBlendWeight4[2] * readMatrixSampler(boneSampler, _glesBlendIndex4[2])\r\n\t\t\t+ _glesBlendWeight4[3] * readMatrixSampler(boneSampler, _glesBlendIndex4[3]);\r\n\t// mat = mat4(\r\n\t// \tvec4(1, 0, 0, 0),\r\n\t// \tvec4(0, 1, 0, 0),\r\n\t// \tvec4(0, 0, 1, 0),\r\n\t// \tvec4(0, 0, 0, 1)\r\n\t// \t);\r\n\t// mat = _glesBlendWeight4.x * glstate_matrix_bones[int(_glesBlendIndex4.x)]\r\n\t// \t\t+ _glesBlendWeight4.y * glstate_matrix_bones[int(_glesBlendIndex4.y)]\r\n\t// \t\t+ _glesBlendWeight4.z * glstate_matrix_bones[int(_glesBlendIndex4.z)]\r\n\t// \t\t+ _glesBlendWeight4.w * glstate_matrix_bones[int(_glesBlendIndex4.w)];\r\n\tvcolor = vec4(texture(boneSampler, _glesVertex.xz / vec2(8., 0)/ 3.).rgb, 1);\r\n    // xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    // //----------------------------------------------------------\r\n    // #ifdef LIGHTMAP\r\n    // mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    // lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    // lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    // lightmap_TEXCOORD = vec2(u,v);\r\n    // #endif\r\n\r\n    #ifdef SKIN\r\n    // position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n\tposition = mat * position;\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","fakepbr.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _albedo;\r\nuniform lowp sampler2D _normal;\r\nuniform lowp sampler2D _gloss;\r\nuniform lowp sampler2D _specular;\r\nuniform lowp sampler2D _opacity;\r\nuniform lowp float _cutvalue;\r\nuniform lowp vec4 glstate_eyepos;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\n\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin lowp vec3 posWorld;\r\nin lowp vec3 normalDir;\r\nin lowp vec3 tangentDir;\r\nin lowp vec3 bitangentDir;\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\n    //calcDiffuse 计算漫反射强度函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n\r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n\r\n    return diffuse;\r\n}\r\n\r\nlowp float calcSpec(lowp vec3 N,lowp vec3 worldpos,lowp vec3 eyedir,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n\r\n    lowp float shininess=30.0;//高光系数\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //三种光源 计算出三个 高光强度，然后根据条件选出一个\r\n    lowp float spec =pow(clamp(dot(N,normalize(L+eyedir)),0.0,1.0), shininess);\r\n    lowp float specD =pow(clamp(dot(N,normalize(L2+eyedir)),0.0,1.0), shininess);\r\n    spec= mix(spec,spec*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    spec= mix(specD,spec,lightPos.w);\r\n\r\n    //highp  float specularLight = pow(clamp(dot(N,H),0.0,1.0), shininess);\r\n\r\n    return spec;\r\n}\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp float _opacity_var = texture(_opacity,xlv_TEXCOORD0).g;\r\n    if(_opacity_var<0.5)  discard;\r\n\r\n\r\n    //clip(step(_cutvalue,_opacity_var) - 0.5);\r\n\r\n    lowp float diff=0.0;\r\n    lowp float specularPower=0.0;\r\n    lowp mat3 TBNmat = mat3( tangentDir, bitangentDir, normalDir);\r\n    lowp vec3 eyeDir =glstate_eyepos.xyz-posWorld;\r\n    for(int i=0;i<8;i++)\r\n    {\r\n        lowp vec3 normal;// = TBN*N;\r\n\t\tnormal =  texture(_normal, xlv_TEXCOORD0).xyz *2.0 -1.0;\r\n        normal =normalize(normal);\r\n\t\tnormal =TBNmat*(normal);\r\n        \r\n        diff+=calcDiffuse(normal,posWorld,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i]);\r\n        specularPower+=calcSpec(normal,posWorld,eyeDir,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i]);\r\n    }\r\n\r\n    //gloss //假的光洁度，只影响了高光\r\n    lowp float Pi = 3.141592654;\r\n    lowp float InvPi = 0.31830988618;\r\n    lowp vec4 _gloss_var = texture(_gloss,xlv_TEXCOORD0);\r\n    lowp float gloss = _gloss_var.r;\r\n    lowp float specPow = exp2( gloss * 10.0+1.0);\r\n    //spec //受到高光贴图的过滤\r\n    lowp float normTerm = (specPow + 8.0 ) / (8.0 * Pi);\r\n    lowp vec4 specularColor = texture(_specular,xlv_TEXCOORD0);\r\n    lowp float specularMonochrome = max( max(specularColor.r, specularColor.g), specularColor.b);\r\n    specularColor*=pow(specularPower,specPow)*normTerm;\r\n    //diffuse\r\n\r\n    lowp vec4 diffuseColor= texture(_albedo, xlv_TEXCOORD0);//光照颜色\r\n    diffuseColor *= 1.0-specularMonochrome;//均衡能量\r\n    lowp vec3 directDiffuse = vec3(diff,diff,diff);//直接光照\r\n    lowp vec3 indirectDiffuse = vec3(0.3,0.3,0.3);//间接光照\r\n\r\n    lowp vec4 col_1;    \r\n    lowp vec4 prev_2;\r\n    lowp vec4 final = (diffuseColor*vec4(directDiffuse+indirectDiffuse,1.0)  + specularColor);\r\n\r\n    color = final;\r\n\r\n}","fakepbr.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"fakepbr\",\r\n                \"fs\": \"fakepbr\",\r\n                \"zwrite\": \"on\",\r\n                \"ztest\": \"lequal\"\r\n            }\r\n        ],\r\n        \"base_fog\": [],\r\n        \"skin\": [],\r\n        \"lightmap\": [],\r\n        \"quad\": [],\r\n        \"base_depth\": []\r\n    }\r\n}","fakepbr.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 2) in highp vec3    _glesTangent;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST; \r\n\r\nout mediump vec2 xlv_TEXCOORD0;\r\nout highp vec3 posWorld;\r\nout lowp vec3 normalDir;\r\nout lowp vec3 tangentDir;\r\nout lowp vec3 bitangentDir;\r\nvoid main()\r\n{\r\n    vec4 pos = vec4(_glesVertex.xyz,1.0);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw; \r\n    posWorld = (glstate_matrix_model * pos).xyz;\r\n    highp mat3 normalmat = mat3(glstate_matrix_model);\r\n\r\n    normalDir = normalize(normalmat*_glesNormal);\r\n    tangentDir = normalize(normalmat*_glesTangent);\r\n    bitangentDir = cross(normalDir,tangentDir);\r\n\r\n    gl_Position = (glstate_matrix_mvp * pos);\r\n}","filter_quad.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D _MainTex;\r\nuniform lowp float _FilterType;\r\nuniform lowp float _Step;\r\nin highp vec2 xlv_TEXCOORD0;\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    vec2 tcOffset[25];\r\n    lowp float xInc = _Step / 1024.0;\r\n    lowp float yInc = _Step / 1024.0;\r\n    for (int i = 0; i < 5; i++)\r\n    {\r\n        for (int j = 0; j < 5; j++)\r\n        {\r\n            tcOffset[(((i * 5) + j) * 2)] = vec2((-2.0 * xInc) + (float(i) * xInc), (-2.0 * yInc) + (float(j) * yInc));\r\n        }\r\n    }\r\n\r\n    // 灰度图\r\n    if (_FilterType == 1.)\r\n    {\r\n        float gray = dot(texture(_MainTex, xlv_TEXCOORD0.xy).rgb, vec3(0.299, 0.587, 0.114));\r\n        color = vec4(gray, gray, gray, 1.0);\r\n    }\r\n\r\n    // 棕褐色调\r\n    else if (_FilterType == 2.)\r\n    {\r\n        float gray = dot(texture(_MainTex, xlv_TEXCOORD0.xy).rgb, vec3(0.299, 0.587, 0.114));\r\n        color = vec4(gray * vec3(1.2, 1.0, 0.8), 1.0);\r\n    }\r\n\r\n    // 反色\r\n    else if (_FilterType == 3.)\r\n    {\r\n        vec4 color = texture(_MainTex, xlv_TEXCOORD0.xy);\r\n        color = vec4(1.0 - color.rgb, 1.0);\r\n    }\r\n\r\n    // 高斯滤波\r\n    else if (_FilterType == 4.)\r\n    {\r\n        vec4 _sample[25];\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            _sample[i] = texture(_MainTex, xlv_TEXCOORD0.xy + tcOffset[i]);\r\n        }\r\n\r\n        // 1  4  7  4 1\r\n        // 4 16 26 16 4\r\n        // 7 26 41 26 7 / 273 (除权重总和)\r\n        // 4 16 26 16 4\r\n        // 1  4  7  4 1\r\n        color = (\r\n                            (1.0  * (_sample[0] + _sample[4]  + _sample[20] + _sample[24])) +\r\n                            (4.0  * (_sample[1] + _sample[3]  + _sample[5]  + _sample[9] + _sample[15] + _sample[19] + _sample[21] + _sample[23])) +\r\n                            (7.0  * (_sample[2] + _sample[10] + _sample[14] + _sample[22])) +\r\n                            (16.0 * (_sample[6] + _sample[8]  + _sample[16] + _sample[18])) +\r\n                            (26.0 * (_sample[7] + _sample[11] + _sample[13] + _sample[17])) +\r\n                            (41.0 * _sample[12])\r\n                         ) / 273.0;\r\n    }\r\n\r\n    // 均值滤波\r\n    else if (_FilterType == 5.)\r\n    {\r\n        vec4 _sample[25];\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            _sample[i] = texture(_MainTex, xlv_TEXCOORD0.xy + tcOffset[i]);\r\n        }\r\n\r\n        vec4 color;\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            color += _sample[i];\r\n        }\r\n\r\n        color = color / 25.0;\r\n    }\r\n\r\n    // 锐化\r\n    else if (_FilterType == 6.)\r\n    {\r\n        vec4 _sample[25];\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            _sample[i] = texture(_MainTex, xlv_TEXCOORD0.xy + tcOffset[i]);\r\n        }\r\n\r\n        // -1 -1 -1 -1 -1\r\n        // -1 -1 -1 -1 -1\r\n        // -1 -1 25 -1 -1\r\n        // -1 -1 -1 -1 -1\r\n        // -1 -1 -1 -1 -1\r\n        vec4 color = _sample[12] * 25.0;\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            if (i != 12)\r\n            {\r\n                color -= _sample[i];\r\n            }\r\n        }\r\n\r\n        color = color;\r\n    }\r\n\r\n    // 膨胀\r\n    else if (_FilterType == 7.)\r\n    {\r\n        vec4 _sample[25];\r\n        vec4 maxValue = vec4(0.0);\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            _sample[i] = texture(_MainTex, xlv_TEXCOORD0.xy + tcOffset[i]);\r\n            maxValue = max(_sample[i], maxValue);\r\n        }\r\n\r\n        color = maxValue;\r\n    }\r\n\r\n    // 腐蚀\r\n    else if (_FilterType == 8.)\r\n    {\r\n        vec4 _sample[25];\r\n        vec4 minValue = vec4(1.0);\r\n        for (int i = 0; i < 25; i++)\r\n        {\r\n            _sample[i] = texture(_MainTex, xlv_TEXCOORD0.xy + tcOffset[i]);\r\n            minValue = min(_sample[i], minValue);\r\n        }\r\n        color = minValue;\r\n    }\r\n\r\n    // 标准\r\n    else\r\n    {\r\n        color = texture(_MainTex, xlv_TEXCOORD0.xy);\r\n    }\r\n}","filter_quad.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_FilterType('FilterType',Float)=0\",\r\n        \"_Step('Step',Float)=1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"filter_quad\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"filter_quad\"\r\n            }\r\n        ]\r\n    }\r\n}","flowwater_new.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;  \r\nin mediump vec2 _base_uv;\r\nin lowp vec4 attcolor;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture(_MainTex, _base_uv);\r\n    lowp vec4 emission=basecolor*attcolor;\r\n\r\n    #ifdef FOG\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    emission= mix(vec4(0,0,0,0), emission, factor);\r\n    #endif\r\n\r\n    color =emission;\r\n}","flowwater_new.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n\t\t    \"_MainColor('MainColor',color)=(1,1,1,1)\"\r\n    ],\r\n  \"queue\": 0,\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"ccw\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"flowwater_new\",\r\n        \"fs\": \"flowwater_new\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"ccw\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"flowwater_new\",\r\n        \"fs\": \"flowwater_new\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","flowwater_new.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in highp vec4    _glesColor;\r\n\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _alphaRate;\r\nuniform lowp float _colorRate;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform lowp float _speedu;\r\nuniform lowp float _speedv;\r\nuniform lowp float glstate_timer;\r\n\r\nout mediump vec2 _base_uv;\r\nout lowp vec4 attcolor;\r\n\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\thighp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    lowp vec2 _speed= vec2(_speedu,_speedv);\r\n\t_base_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw+ _speed * glstate_timer;\r\n\tattcolor= _MainColor;\r\n\tattcolor.rgb=attcolor.rgb*_colorRate;\r\n\tattcolor.a=attcolor.a*_alphaRate;\r\n\t\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start); \r\n    factor = clamp(factor, 0.0, 1.0);  \r\n    #endif\r\n\r\n\tposition = (glstate_matrix_mvp * position);\r\n\tgl_Position = position;\r\n}\r\n\r\n","gaussianBlur.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform lowp float _BlurGap; //卷积每层间隔单位\r\nuniform lowp float _BlurSigma; //二维正太分布中的西格玛值\r\nuniform lowp float _BlurLayer; //卷积层数\r\nuniform highp vec4 _MainTex_TexelSize;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\nconst lowp float max_Num = 100.0;\r\n\r\n//texture2DEtC1Mark\r\n\r\n//高斯模糊 算法获取权重矩阵 rx ,ry 以当前采样点 为原点的相对坐标\r\nlowp float getGausWeight(lowp float rx,lowp float ry)\r\n{\r\n\tlowp float pi = 3.1415926535898 ;\r\n\tlowp float xDistance = float(rx*rx);\r\n\tlowp float yDistance = float(ry*ry);\r\n\tlowp float sigma22 = 2.0*_BlurSigma*_BlurSigma;\r\n\tlowp float sigma22PI = pi*sigma22;\r\n\r\n\treturn exp(-(xDistance + yDistance)/sigma22)/sigma22PI;\r\n}\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n\tlowp float size =2.0 * _BlurLayer + 1.0;\r\n\r\n\thighp vec4 _color;\r\n\thighp vec4 _sample;\r\n\tlowp float tx;\r\n\tlowp float ty;\r\n\tlowp float rx;\r\n\tlowp float ry;\r\n\tlowp float sum;\r\n\tlowp float tempWeight;\r\n\tfor(lowp float i=0.0 ; i<max_Num ; i +=1.0){\r\n\t\tif(i >=size) {break;}\r\n\t\tfor(lowp float j=0.0 ; j<max_Num ; j +=1.0){\r\n\t\t\tif(j >=size) {break;}\r\n\t\t\trx = -_BlurLayer + i;\r\n\t\t\try = -_BlurLayer + j;\r\n\t\t\ttx = rx * _MainTex_TexelSize.x * _BlurGap;\r\n\t\t\tty = ry * _MainTex_TexelSize.y * _BlurGap;\r\n\t\t\ttempWeight = getGausWeight(rx,ry);\r\n\t\t\t_sample = texture(_MainTex,vec2(xlv_TEXCOORD0.x + tx ,xlv_TEXCOORD0.y + ty));   \r\n\t\t\t_color += _sample * tempWeight;  \r\n\t\t\tsum += tempWeight; \r\n\t\t}\r\n\t}\r\n\r\n    color = _color/sum;  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","gaussianBlur.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_BlurGap('_BlurGap',float)=1.0\",\r\n        \"_BlurSigma('BlurSigma',float)=2.0\",\r\n        \"_BlurLayer('BlurLayer',float)=3.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"gaussianBlur\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"gaussianBlur\"\r\n            }\r\n        ]\r\n    }\r\n}","hdr_quad.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_K('K',Range(0.5,2.0))=1.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"hdr_quad_0\"\r\n            },\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"hdr_quad_1\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"hdr_quad_0\"\r\n            },\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"hdr_quad_1\"\r\n            }\r\n        ]\r\n    }\r\n}","hdr_quad_0.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nconst vec2 texSize = vec2(256., 256.);\r\n\r\nuniform sampler2D _MainTex;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\n//texture2DEtC1Mark\r\n\r\nvec4 blur_filter(mat3 _filter, vec2 filter_pos_delta[9], sampler2D image, vec2 xy, vec2 texSize)\r\n{\r\n    vec4 final_color = vec4(0., 0., 0., 0.);\r\n    for (int i = 0; i < 3; i++)\r\n    {\r\n        for (int j = 0; j < 3; j++)\r\n        {\r\n            vec2 new_xy = vec2(xy.x + filter_pos_delta[3 * i + j].x, xy.y + filter_pos_delta[3 * i + j].y);\r\n            vec2 new_uv = vec2(new_xy.x / texSize.x, new_xy.y / texSize.y);\r\n            final_color += texture(_MainTex, new_uv) * _filter[i][j];\r\n        }\r\n    }\r\n    return final_color;\r\n}\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    vec2 filter_pos_delta[9];\r\n    filter_pos_delta[0] = vec2(-1., -1.);\r\n    filter_pos_delta[1] = vec2(0., -1.);\r\n    filter_pos_delta[2] = vec2(1., -1.);\r\n    filter_pos_delta[4] = vec2(-1., 0.);\r\n    filter_pos_delta[5] = vec2(0., 0.);\r\n    filter_pos_delta[6] = vec2(1., 0.);\r\n    filter_pos_delta[7] = vec2(-1., 1.);\r\n    filter_pos_delta[8] = vec2(0., 1.);\r\n    filter_pos_delta[3] = vec2(1., 1.);\r\n\r\n    mat3 _filter = mat3(1. / 16., 1. / 8., 1. / 16.,\r\n                        1. / 8., 1. / 4., 1. / 8.,\r\n                        1. / 16., 1. / 8., 1. / 16.);\r\n\r\n    vec2 xy = vec2(xlv_TEXCOORD0.x * texSize.x, xlv_TEXCOORD0.y * texSize.y);\r\n\r\n    vec4 _color = blur_filter(_filter, filter_pos_delta, _MainTex, xy, texSize);\r\n\r\n    color = _color;\r\n}","hdr_quad_1.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D _MainTex;\r\nuniform float _K;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\n//texture2DEtC1Mark\r\n\r\nvec4 xposure(vec4 color, float gray, float ex)\r\n{\r\n    float b = (4. * ex - 1.);\r\n    float a = 1. - b;\r\n    float f = gray * (a * gray + b);\r\n    return color * f;\r\n}\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    vec4 _color = texture(_MainTex, xlv_TEXCOORD0);\r\n    float lum = .3 * _color.x + .59 * _color.y + .11 * _color.z;\r\n    color = xposure(_color, lum, _K);\r\n}","light1.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;                                                 \r\nin lowp vec4 xlv_COLOR;                                                 \r\nin mediump vec2 xlv_TEXCOORD0;   \r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 tmpvar_3= (xlv_COLOR * texture(_MainTex, xlv_TEXCOORD0));\r\n    lowp vec4 tmpvar_4 = mix(vec4(1.0, 1.0, 1.0, 1.0), tmpvar_3, tmpvar_3.wwww);\r\n    color = tmpvar_4;\r\n}","light1.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"light1\",\r\n                \"fs\": \"light1\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ],\r\n        \"shadowuse\": []\r\n    }\r\n}","light1.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;   \r\nlayout(location = 1) in highp vec3    _glesNormal;   \r\nlayout(location = 3) in highp vec4    _glesColor;                  \r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;        \r\nuniform highp mat4 glstate_matrix_mvp;      \r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_modelview;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp float glstate_lightcount;\r\n\r\nout lowp vec4 xlv_COLOR;                \r\nout mediump vec2 xlv_TEXCOORD0;     \r\n\r\n//calcDiffuse 计算漫反射强度函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n\r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n\r\n    return diffuse;\r\n     \r\n}\r\nvoid main()                                     \r\n{                                               \r\n    highp vec4 tmpvar_1;                        \r\n    tmpvar_1.w = 1.0;                           \r\n    tmpvar_1.xyz = _glesVertex.xyz;    \r\n\r\n    //求世界空间法线\r\n    lowp mat3 normalmat = mat3(glstate_matrix_model);\r\n    lowp vec3 N =normalize(normalmat*_glesNormal);\r\n\r\n    highp vec3 worldpos =(glstate_matrix_model * vec4(_glesVertex.xyz, 1.0)).xyz;\r\n\r\n    lowp float diff=0.0;\r\n    //calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\r\n    for(int i=0;i<8;i++)\r\n    {\r\n        int c =int(glstate_lightcount);\r\n        if(i>=c)break;\r\n        diff += calcDiffuse(N,worldpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i]);\r\n    }\r\n\r\n    xlv_COLOR = vec4(diff,diff,diff,1.0);         \r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;     \r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);  \r\n}","light2.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;\r\n\r\n\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\n\r\nin highp vec3 vWorldpos;\r\nin lowp vec3 vNormal;\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin lowp vec3 vEyepos;\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\n//calcDiffuse 计算漫反射强度函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n\r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n\r\n    return diffuse;\r\n}\r\n\r\nlowp float calSpec(lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir)\r\n{\r\n   // highp vec3 ks=vec3(0.5,0.5,0.5);//物体对于反射光线的衰减系数\r\n    lowp float shininess=1.0;//高光系数\r\n   // highp vec3 lightcolor=vec3(1.0,1.0,1.0);\r\n\r\n    lowp vec3 N=normalize(vNormal);\r\n\r\n   // highp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    lowp vec3 L = normalize(-lightDir.xyz); \r\n    lowp vec3 v=normalize(vEyepos-worldpos);\r\n    lowp vec3 H=normalize(L+v);\r\n    //highp vec3 R=reflect(-L,N);\r\n    //R=normalize(R);\r\n\r\n    lowp  float specularLight = pow(clamp(dot(N,H),0.0,1.0), shininess);\r\n\r\n    //highp vec3 spec=ks*lightcolor*specularLight;\r\n    lowp float spec=specularLight;\r\n    return spec;\r\n}\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp float diff=0.0;\r\n    lowp float specularColor=0.0;\r\n    for(int i=0;i<8;i++)\r\n    {\r\n        diff+=calcDiffuse(vNormal,vWorldpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i]);\r\n        specularColor+=calSpec(vWorldpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i]);\r\n    }\r\n    lowp vec4 xlv_COLOR=vec4(diff,diff,diff,1.0);\r\n    xlv_COLOR+=vec4(specularColor,specularColor,specularColor,1.0);\r\n\r\n    lowp vec4 col_1;    \r\n    lowp vec4 prev_2;\r\n    lowp vec4 tmpvar_3;\r\n    tmpvar_3 = (xlv_COLOR * texture(_MainTex, xlv_TEXCOORD0));\r\n\r\n    prev_2 = tmpvar_3;\r\n    lowp vec4 tmpvar_4;\r\n    tmpvar_4 = mix(vec4(1.0, 1.0, 1.0, 1.0), prev_2, prev_2.wwww);\r\n    col_1 = tmpvar_4;\r\n    \r\n   color = col_1;\r\n    //color=vec4(specularColor,1.0);\r\n    //color = xlv_COLOR;\r\n}","light2.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n\t\t\"_NormalTex('NormalTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"light2\",\r\n                \"fs\": \"light2\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","light2.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;   \r\nlayout(location = 1) in highp vec3    _glesNormal;   \r\nlayout(location = 3) in highp vec4    _glesColor;                  \r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0; \r\n\r\nuniform lowp sampler2D _NormalTex;   //normal map\r\n\r\nuniform highp mat4 glstate_matrix_mvp;      \r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_modelview;\r\nuniform highp vec4 glstate_eyepos;\r\n\r\nout lowp vec3 vWorldpos;\r\nout lowp vec3 vNormal;\r\nout mediump vec2 xlv_TEXCOORD0;\r\nout lowp vec3 vEyepos;\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\nvoid main()\r\n{\r\n    highp vec4 tmpvar_1;                        \r\n    tmpvar_1.w = 1.0;                           \r\n    tmpvar_1.xyz =_glesVertex;\r\n    vWorldpos=(glstate_matrix_model*tmpvar_1).xyz;\r\n    //vWorldpos =glstate_matrix_model[3].xyz;//计算输出定点位置\r\n\r\n    vEyepos=glstate_eyepos.xyz;\r\n      \r\n    //求世界空间法线\r\n    lowp mat4 vnormalMat = glstate_matrix_model;\r\n    vnormalMat[3] =vec4(0,0,0,1);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n    lowp vec3 NormalMap = texture(_NormalTex, xlv_TEXCOORD0).rgb;\r\n    lowp vec3 N = normalize(NormalMap * 2.0 - vec3(1.0));\r\n\r\n    vNormal =normalize((vec4(_glesNormal,1)*vnormalMat).xyz);\r\n\r\n    //vNormal=N;\r\n\r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\r\n}\r\n\r\n","light3.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;  \r\nuniform lowp sampler2D _NormalTex;   //normal map\r\n\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp float glstate_lightcount;\r\n//in lowp vec4 xlv_COLOR;     \r\n//in highp vec3 xlv_Position;                                             \r\nin mediump vec2 xlv_TEXCOORD0; \r\n//in highp vec3 xlv_Normal; \r\n//in highp mat4 normalmat;\r\nin lowp mat3 TBNmat;\r\nin lowp vec3 worldpos; \r\nin lowp vec3 eyedir;\r\n\r\n//texture2DEtC1Mark\r\n\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot);\r\nlowp float calcSpec(lowp vec3 N,lowp vec3 worldpos,lowp vec3 eyedir,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot);\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    //不需要法线图时，normal 就是这个N\r\n    //highp vec3 N =normalize((vec4(xlv_Normal,1)*normalmat).xyz);\r\n\r\n    lowp float diff=0.0;\r\n    lowp float spec=0.0;\r\n    //calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\r\n    for(int i=0;i<8;i++)\r\n    {\r\n        int c =int(glstate_lightcount);\r\n        if(i>=c)break;\r\n    \r\n\t\tlowp vec4 lpos=glstate_vec4_lightposs[i];\r\n\t\t//lpos.xyz = TBN*lpos.xyz;\r\n\t\tlowp vec4 ldir =glstate_vec4_lightdirs[i];\r\n\t\t//ldir.xyz = TBN*ldir.xyz;\r\n\t\t\r\n\t\t//这是进入切空间的原因\r\n\t\tlowp vec3 normal;// = TBN*N;\r\n\t\tnormal =  texture(_NormalTex, xlv_TEXCOORD0).xyz *2.0 -1.0;\r\n        normal =normalize(normal);\r\n\t\tnormal =TBNmat*(normal);\r\n\r\n\r\n        diff += calcDiffuse(normal,worldpos,lpos,ldir,glstate_float_spotangelcoss[i]);\r\n        spec += calcSpec(normal,worldpos,eyedir,lpos,ldir,glstate_float_spotangelcoss[i]);\r\n    }\r\n\t//diff=1.0;\r\n\tlowp vec4 _color = vec4(diff,diff,diff,1.0);       \r\n    lowp vec4 colorspec =vec4(spec,spec,spec,1.0);\r\n    lowp vec4 fcolor;\r\n    fcolor = (_color * texture(_MainTex, xlv_TEXCOORD0) + colorspec);\r\n\r\n    color = fcolor;\r\n}\r\n\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n\r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n\r\n    return diffuse;\r\n     \r\n}\r\nlowp float calcSpec(lowp vec3 N,lowp vec3 worldpos,lowp vec3 eyedir,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n\r\n    lowp float shininess=30.0;//高光系数\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //三种光源 计算出三个 高光强度，然后根据条件选出一个\r\n    lowp float spec =pow(clamp(dot(N,normalize(L+eyedir)),0.0,1.0), shininess);\r\n    lowp float specD =pow(clamp(dot(N,normalize(L2+eyedir)),0.0,1.0), shininess);\r\n    spec= mix(spec,spec*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    spec= mix(specD,spec,lightPos.w);\r\n\r\n    //highp  float specularLight = pow(clamp(dot(N,H),0.0,1.0), shininess);\r\n\r\n    return spec;\r\n}\r\n","light3.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n\t\t\"_NormalTex('NormalTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"cw\",\r\n                \"vs\": \"light3\",\r\n                \"fs\": \"light3\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","light3.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\n// in  ins from our SpriteBatch\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nlayout(location = 2) in highp vec3    _glesTangent;  \r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_modelview;\r\nuniform highp vec4 glstate_eyepos;\r\n\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\n\r\n\r\n\r\n// out  outs to our fragment shader\r\n//out highp vec4 xlv_COLOR;\r\n//out highp vec3 xlv_Position;      \r\nout mediump vec2 xlv_TEXCOORD0;\r\n//out highp vec3 xlv_Normal;\r\n\r\n//out highp mat4 normalmat;\r\nout lowp mat3 TBNmat;\r\nout lowp vec3 worldpos;\r\nout lowp vec3 eyedir;\r\n\r\n\r\nlowp mat3 calBTNMatrix(lowp mat4 NormalMatToWorld,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n    lowp vec3 normal=normalize(vec3(NormalMatToWorld*vec4(_normal,0.0)));\r\n    lowp vec3 tangent=normalize(vec3(NormalMatToWorld*vec4(_tangent,0.0)));\r\n    lowp vec3 binormal=cross(normal,tangent);\r\n  \treturn (mat3(tangent,binormal,normal));\r\n\r\n}\r\nvoid main()\r\n{\r\n\t//求世界空间法线\r\n  \thighp mat4  normalmat = glstate_matrix_model;\r\n\tnormalmat[3] =vec4(0,0,0,1);\r\n\r\n   \tTBNmat=calBTNMatrix(normalmat,_glesNormal,_glesTangent);\r\n\r\n    worldpos =(glstate_matrix_model * vec4(_glesVertex.xyz, 1.0)).xyz;\r\n\teyedir = glstate_eyepos.xyz - worldpos;\r\n\r\n\t//xlv_COLOR = _glesColor;\r\n\t//xlv_Normal = _glesNormal;\r\n\t//xlv_Position = _glesVertex.xyz;\r\n\txlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n\tgl_Position = (glstate_matrix_mvp * vec4(_glesVertex.xyz, 1.0));\r\n}\r\n\r\n","linetrail.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nin vec2 v_uv;\r\n\r\nuniform vec4 _TintColor;\r\nuniform sampler2D _MainTex;\r\nuniform vec4 _MainTex_ST;\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    vec4 finalColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    vec2 uv = v_uv;\r\n    uv = uv * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    finalColor = finalColor * _TintColor * texture(_MainTex, uv);\r\n\r\n    color = finalColor;\r\n}","linetrail.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"linetrail\",\r\n        \"fs\": \"linetrail\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"linetrail\",\r\n        \"fs\": \"linetrail\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","linetrail.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;  \r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nout vec2 v_uv;\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n    //输出uv\r\n    v_uv = _glesMultiTexCoord0.xy;\r\n\r\n    //计算投影坐标\r\n    gl_Position = glstate_matrix_mvp * position;\r\n}","mask_add_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_add_tint_uvroll.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\r\n        \"_speedu('speedu',Float) = -1\",\r\n        \"_speedv('speedv',Float) = 0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_blend_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_blend_tint_uvroll.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\r\n        \"_speedu('speedu',Float) = -1\",\r\n        \"_speedv('speedv',Float) = 0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_trans_tint.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex; \r\nuniform sampler2D _Mask; \r\nuniform mediump vec4 _Main_Color;\r\n\r\nin mediump vec2 _maintex_uv;\r\nin mediump vec2 _mask_uv;\r\n\r\nuniform lowp float _mixColorRate;\r\nuniform lowp float _mixAlphaRate;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\nout vec4 color; \r\nvoid main()    \r\n{\r\n    highp vec4 basecolor=texture(_MainTex,_maintex_uv);\r\n    highp vec4 maskcolor=texture(_Mask,_mask_uv);\r\n\r\n    lowp vec3 tempcolor=_Main_Color.rgb*basecolor.rgb*maskcolor.rgb*_mixColorRate;\r\n    lowp float tempAlpha=_Main_Color.a*basecolor.a*maskcolor.a*_mixAlphaRate;\r\n    lowp vec4 emission=vec4(tempcolor,tempAlpha);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission= mix(vec4(0,0,0,0), emission, factor);\r\n\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    color = emission;\r\n\r\n\r\n}\r\n","mask_trans_tint.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _Mask_ST;\r\nout mediump vec2 _maintex_uv;\r\nout mediump vec2 _mask_uv;\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4    _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    _maintex_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position=calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position =glstate_matrix_mvp * position;\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\tgl_Position = position;\r\n}","mosaic.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform lowp float _MosaicSize;\r\nuniform highp vec4 _MainTex_TexelSize;\r\nin highp vec2 xlv_TEXCOORD0;\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() //马赛克效果\r\n{\r\n    // lowp vec4 tmpvar_3 = texture(_MainTex, xlv_TEXCOORD0);\r\n    // color = tmpvar_3;\r\n    highp vec2 uv = (xlv_TEXCOORD0*_MainTex_TexelSize.zw);\r\n    uv = floor(uv/_MosaicSize)*_MosaicSize;\r\n    uv = uv * _MainTex_TexelSize.xy;\r\n    color = texture(_MainTex, uv);\r\n    // highp vec4 color = texture(_MainTex,xlv_TEXCOORD0);\r\n    // color = color * color;\r\n}","mosaic.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MosaicSize('MosaicSize',float)=5\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"mosaic\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"mosaic\"\r\n            }\r\n        ]\r\n    }\r\n}","normalmap.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;  \r\nuniform lowp sampler2D _NormalTex;   //normal map\r\n\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp float glstate_lightcount;\r\nin lowp vec4 xlv_COLOR;     \r\nin highp vec3 xlv_Position;                                             \r\nin mediump vec2 xlv_TEXCOORD0; \r\nin lowp mat3 TBNmat;\r\nin highp vec3 worldpos; \r\n\r\n//texture2DEtC1Mark\r\n\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot);\r\n// highp mat3 cotangentFrame(vec3 normal,highp vec3 position,vec2 uv);\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n\t//切空间逆矩阵的计算 应该在vertex shader 里面完成，不需要dfdx 和 dfdy\r\n\t\r\n\t//mesh 算好切线tangent，然后 normal 和 tangent cross 出 bnormal\r\n\t//然后合成出切空间逆矩阵，放在这里算不划算\r\n\tlowp mat3 TBN = TBNmat;//\r\n\r\n    lowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\r\n\tlowp vec3 N = normalize(TBNmat[2]*normalmat);\r\n\r\n    lowp float diff=0.0;\r\n\r\n    //calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\r\n    for(int i=0;i<8;i++)\r\n    {        \r\n        int c =int(glstate_lightcount);\r\n        if(i>=c)break;\r\n\t\tlowp vec4 lpos=glstate_vec4_lightposs[i];\r\n\t\t//lpos.xyz = TBN*lpos.xyz;\r\n\t\tlowp vec4 ldir =glstate_vec4_lightdirs[i];\r\n\t\t//ldir.xyz = TBN*ldir.xyz;\r\n\t\t\r\n\t\t//这是进入切空间的原因\r\n\t\tlowp vec3 normal;// = TBN*N;\r\n\t\tnormal =  texture(_NormalTex, xlv_TEXCOORD0).xyz *2.0 -1.0;\r\n        normal =normalize(normal);\r\n\t\tnormal =TBN*(normal);\r\n\r\n\t\t\r\n        diff += calcDiffuse(normal,worldpos,lpos,ldir,glstate_float_spotangelcoss[i]);\r\n    }\r\n\t//diff=1.0;\r\n\tlowp vec4 _color = vec4(diff,diff,diff,1.0);       \r\n\r\n    lowp vec4 tmpvar_3;\r\n    tmpvar_3 = (_color * texture(_MainTex, xlv_TEXCOORD0));\r\n\r\n    color = tmpvar_3;\r\n}\r\n\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot)\r\n{\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(lightPos.xyz - worldpos); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n\r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n\r\n    return diffuse;\r\n     \r\n}\r\n","normalmap.shader.json":"{\r\n\t\"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n\t\t\"_NormalTex('NormalTex',Texture)='white'{}\"\r\n    ],\r\n\t\"passes\": {\r\n\t\t\"base\": [\r\n\t\t\t{\r\n\t\t\t\t\"showface\": \"all\",\r\n\t\t\t\t\"vs\": \"normalmap\",\r\n\t\t\t\t\"fs\": \"normalmap\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"shadowgen\": [],\r\n\t\t\"bone\": [],\r\n\t\t\"shadowuse\": []\r\n\t}\r\n}","normalmap.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\n// in  ins from our SpriteBatch\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in highp vec4    _glesColor;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nlayout(location = 2) in highp vec3    _glesTangent;  \r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_modelview;\r\nuniform highp vec4 glstate_eyepos;\r\n\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp float glstate_lightcount;\r\n\r\n\r\n// out  outs to our fragment shader\r\nout lowp vec4 xlv_COLOR;\r\nout highp vec3 xlv_Position;      \r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\nout lowp mat3 TBNmat;\r\nout lowp vec3 worldpos;\r\n\r\n\r\nlowp mat3 calBTNMatrix(lowp mat3 NormalMatToWorld,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n    lowp vec3 normal=normalize(NormalMatToWorld*_normal);\r\n    lowp vec3 tangent=normalize(NormalMatToWorld*_tangent);\r\n    lowp vec3 binormal=cross(normal,tangent);\r\n  \treturn (mat3(tangent,binormal,normal));\r\n\r\n}\r\nvoid main()\r\n{\r\n\t//求世界空间法线\r\n    mat3 normalmat = mat3(glstate_matrix_model);\r\n\t//normalmat[3] =vec4(0,0,0,1);\r\n\r\n   \tTBNmat=calBTNMatrix(normalmat,_glesNormal,_glesTangent);\r\n\r\n    worldpos =(glstate_matrix_model * vec4(_glesVertex.xyz, 1.0)).xyz;\r\n\t//eyedir = glstate_eyepos - worldpos;\r\n\r\n\txlv_COLOR = _glesColor;\r\n\txlv_Position = _glesVertex.xyz;\r\n\txlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n\tgl_Position = (glstate_matrix_mvp * vec4(_glesVertex.xyz, 1.0));\r\n}\r\n\r\n\r\n\r\n\r\n","outline.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\nin mediump vec2 xlv_TEXCOORD0;       \r\nuniform lowp sampler2D _DepthTex;   \r\nuniform lowp sampler2D _MainTex;  \r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\nconst float PackUpscale = 256. / 255.; \r\n// fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; \r\n// 0..1 -> fraction (excluding 1)\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\nconst float ShiftRight8 = 1. / 256.;\r\nvec4 packDepthToRGBA( const in float v ) \r\n{\r\n    vec4 r = vec4( fract( v * PackFactors ), v );\r\n\tr.yzw -= r.xyz * ShiftRight8;\r\n // tidy overflow\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGBAToDepth( const in vec4 v ) \r\n{\r\n    return dot( v, UnpackFactors );\r\n}\r\n\r\n\r\nfloat planeDistance(const in vec3 positionA, const in vec3 normalA, \r\n                    const in vec3 positionB, const in vec3 normalB) \r\n{\r\n  vec3 positionDelta = positionB-positionA;\r\n  float planeDistanceDelta = max(abs(dot(positionDelta, normalA)), abs(dot(positionDelta, normalB)));\r\n  return planeDistanceDelta;\r\n}\r\n\r\nout vec4 color; \r\nvoid main()         \r\n{\r\n    lowp vec4 c1=texture(_DepthTex, xlv_TEXCOORD0+vec2(0.001,0));\r\n    lowp vec4 c2=texture(_DepthTex, xlv_TEXCOORD0+vec2(-0.001,0));\r\n    lowp vec4 c3=texture(_DepthTex, xlv_TEXCOORD0+vec2(0,0.001));\r\n    lowp vec4 c4=texture(_DepthTex, xlv_TEXCOORD0+vec2(0,-0.001));\r\n    lowp float z1 = unpackRGBAToDepth(c1);\r\n    lowp float z2 = unpackRGBAToDepth(c2);\r\n    lowp float z3 = unpackRGBAToDepth(c3);\r\n    lowp float z4 = unpackRGBAToDepth(c4);\r\n    lowp float d = clamp(  (abs(z2-z1)+abs(z4-z3))*10.0,0.0,1.0);\r\n    lowp vec4 c=texture(_MainTex, xlv_TEXCOORD0);\r\n    lowp float g = c.r*0.3+c.g*0.6+c.b*0.1;\r\n\r\n    color =mix(vec4(g,g,g,1.),vec4(1.0,1.0,0.0,1.0),d);// vec4(g*d,g*d,g*d,1.0);\r\n}","outline.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_DepthTex('DepthTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"outline\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"outline\"\r\n            }\r\n        ]\r\n    }\r\n}","particlesystem.fs.glsl":"#version 300 es\r\n\r\n\r\nprecision mediump float;\r\n\r\nin vec2 v_uv;\r\n\r\nuniform vec4 _TintColor;\r\nuniform sampler2D _MainTex;\r\n\r\nin vec4 v_color;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    vec4 _color = 2.0 * v_color * _TintColor * texture(_MainTex, v_uv);\r\n\r\n    #ifdef FOG\r\n        _color.xyz = mix(glstate_fog_color.rgb, color.rgb, factor);\r\n    #endif\r\n    \r\n    color = _color;\r\n}","particlesystem.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;  \r\n\r\n//坐标属性\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform float _UVSpeedX;\r\nuniform float _UVSpeedY;\r\nuniform float glstate_timer;\r\n\r\nout vec4 v_color;\r\nout vec2 v_uv;\r\n\r\n#ifdef INSTANCE\r\n    in vec4 a_particle_position;\r\n    in vec4 a_particle_scale;\r\n    in vec4 a_particle_rotation;\r\n    in vec4 a_particle_color;\r\n    in vec4 a_particle_tilingOffset;\r\n    in vec4 a_particle_flipUV;\r\n#else\r\n    uniform vec4 a_particle_position;\r\n    uniform vec4 a_particle_scale;\r\n    uniform vec4 a_particle_rotation;\r\n    uniform vec4 a_particle_color;\r\n    uniform vec4 a_particle_tilingOffset;\r\n    uniform vec4 a_particle_flipUV;\r\n#endif\r\n\r\nuniform mat4 u_particle_billboardMatrix;\r\nuniform vec4 u_particle_pivotOffset;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nmat3 makeParticleRotationMatrix(vec3 rotation)\r\n{\r\n    float DEG2RAD = 3.1415926 / 180.0;\r\n    \r\n    float rx = rotation.x * DEG2RAD;\r\n    float ry = rotation.y * DEG2RAD;\r\n    float rz = rotation.z * DEG2RAD;\r\n\r\n    float sinX = sin(rx);\r\n    float cosX = cos(rx);\r\n    float sinY = sin(ry);\r\n    float cosY = cos(ry);\r\n    float sinZ = sin(rz);\r\n    float cosZ = cos(rz);\r\n\r\n    mat3 tmp;\r\n    float ce = cosY * cosZ;\r\n    float cf = cosY * sinZ;\r\n    float de = sinY * cosZ;\r\n    float df = sinY * sinZ;\r\n\r\n    float te0 = ce + df * sinX;\r\n    float te4 = de * sinX - cf;\r\n    float te8 = cosX * sinY;\r\n\r\n    float te1 = cosX * sinZ;\r\n    float te5 = cosX * cosZ;\r\n    float te9 = - sinX;\r\n\r\n    float te2 = cf * sinX - de;\r\n    float te6 = df + ce * sinX;\r\n    float te10 = cosX * cosY;\r\n\r\n    tmp[0] = vec3(te0, te1, te2);\r\n    tmp[1] = vec3(te4, te5, te6);\r\n    tmp[2] = vec3(te8, te9, te10);\r\n            \r\n    return tmp;\r\n}\r\n\r\nvec4 particleAnimation(vec4 position) \r\n{\r\n    mat3 billboardMatrix = mat3(u_particle_billboardMatrix[0].xyz,u_particle_billboardMatrix[1].xyz,u_particle_billboardMatrix[2].xyz);\r\n    \r\n    position.xyz = position.xyz + u_particle_pivotOffset.xyz;\r\n    \r\n    // 计算缩放\r\n    position.xyz = position.xyz * a_particle_scale.xyz;\r\n\r\n    // 计算旋转\r\n    mat3 rMat = makeParticleRotationMatrix(a_particle_rotation.xyz);\r\n    position.xyz = rMat * position.xyz;\r\n    position.xyz = billboardMatrix * position.xyz;\r\n\r\n    // 位移\r\n    position.xyz = position.xyz + a_particle_position.xyz;\r\n\r\n    // 颜色\r\n    v_color = a_particle_color;\r\n\r\n    if(a_particle_flipUV.x > 0.5) v_uv.x = 1.0 - v_uv.x;\r\n    if(a_particle_flipUV.y > 0.5) v_uv.y = 1.0 - v_uv.y;\r\n    v_uv = v_uv * a_particle_tilingOffset.xy + a_particle_tilingOffset.zw;\r\n    \r\n    return position;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n    //输出uv\r\n    v_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    position = particleAnimation(position);\r\n\r\n    v_uv = v_uv + vec2(_UVSpeedX,_UVSpeedY) * glstate_timer;\r\n\r\n    //计算投影坐标\r\n    position = glstate_matrix_mvp * position;\r\n\r\n    #ifdef FOG\r\n        factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n        factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","particlesystem_additive.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ]\r\n  }\r\n}","particlesystem_additive_transparent_particles_standard.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_BasicColor('Basic Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_SaturatedColor('Saturated Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n\r\n    \"_MainTex('Particle Texture',Texture)='white'{}\",\r\n    \"_ColorRamp('Color Ramp', Texture) = 'white' {}\",\r\n    \"_NoiseTex('Noise Texture', Texture) = 'white' {}\",\r\n\r\n    \"_EmissionSaturation('Emission saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_OpacitySaturation('Opacity saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ColorMultiplier('Color multiplier', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ABOffset('Alpha blend offset', Range(0.0, 8.0)) = 0.0\",\r\n    \r\n    \"_DissolveStep('DissolveStep.xy', Vector) = (0.0, 1.0, 0.0, 0.0)\",\r\n    \r\n    \"_Panning('Automatic Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_GlobalAlpha('Global alpha', float) = 1.0\",\r\n    \r\n    \"_EmissivePower('Emissive Power', Range(1.0, 4.0)) = 1.0\",\r\n    \"_NoisePanning('Noise Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n    \r\n    \"COLOR_RAMP('COLOR_RAMP', float) = 0.0\",\r\n    \"COLOR_TINT('COLOR_TINT', float) = 0.0\",\r\n    \"APPLY_RGB_COLOR_VERTEX('APPLY_RGB_COLOR_VERTEX', float) = 0.0\",\r\n    \"DISSOLVE_ENABLED('DISSOLVE_ENABLED', float) = 0.0\",\r\n    \"AUTOMATICPANNING('AUTOMATICPANNING', float) = 0.0\",\r\n    \"EMISSIVEPOWER('EMISSIVEPOWER', float) = 0.0\",\r\n    \"EXTENDED_PARTICLES('EXTENDED_PARTICLES', float) = 0.0\",\r\n    \"NOISE_TEXTURE('NOISE_TEXTURE', float) = 0.0\",\r\n    \"NOISE_TEXTURE_EMISSION('NOISE_TEXTURE_EMISSION', float) = 0.0\",\r\n    \"NOISE_TEXTURE_ALPHA('NOISE_TEXTURE_ALPHA', float) = 0.0\",\r\n    \"NOISE_TEXTURE_DISSOLVE('NOISE_TEXTURE_DISSOLVE', float) = 0.0\",\r\n    \"NOISEUV('NOISEUV', float) = 0.0\",\r\n    \"FLOWMAP('FLOWMAP', float) = 0.0\",\r\n    \"BlendMode('BlendMode', float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","particlesystem_alphablended.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ]\r\n  }\r\n}","particlesystem_alphablended_transparent_particles_standard.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_BasicColor('Basic Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_SaturatedColor('Saturated Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n\r\n    \"_MainTex('Particle Texture',Texture)='white'{}\",\r\n    \"_ColorRamp('Color Ramp', Texture) = 'white' {}\",\r\n    \"_NoiseTex('Noise Texture', Texture) = 'white' {}\",\r\n\r\n    \"_EmissionSaturation('Emission saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_OpacitySaturation('Opacity saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ColorMultiplier('Color multiplier', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ABOffset('Alpha blend offset', Range(0.0, 8.0)) = 0.0\",\r\n    \r\n    \"_DissolveStep('DissolveStep.xy', Vector) = (0.0, 1.0, 0.0, 0.0)\",\r\n    \r\n    \"_Panning('Automatic Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_GlobalAlpha('Global alpha', float) = 1.0\",\r\n    \r\n    \"_EmissivePower('Emissive Power', Range(1.0, 4.0)) = 1.0\",\r\n    \"_NoisePanning('Noise Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n    \r\n    \"COLOR_RAMP('COLOR_RAMP', float) = 0.0\",\r\n    \"COLOR_TINT('COLOR_TINT', float) = 0.0\",\r\n    \"APPLY_RGB_COLOR_VERTEX('APPLY_RGB_COLOR_VERTEX', float) = 0.0\",\r\n    \"DISSOLVE_ENABLED('DISSOLVE_ENABLED', float) = 0.0\",\r\n    \"AUTOMATICPANNING('AUTOMATICPANNING', float) = 0.0\",\r\n    \"EMISSIVEPOWER('EMISSIVEPOWER', float) = 0.0\",\r\n    \"EXTENDED_PARTICLES('EXTENDED_PARTICLES', float) = 0.0\",\r\n    \"NOISE_TEXTURE('NOISE_TEXTURE', float) = 0.0\",\r\n    \"NOISE_TEXTURE_EMISSION('NOISE_TEXTURE_EMISSION', float) = 0.0\",\r\n    \"NOISE_TEXTURE_ALPHA('NOISE_TEXTURE_ALPHA', float) = 0.0\",\r\n    \"NOISE_TEXTURE_DISSOLVE('NOISE_TEXTURE_DISSOLVE', float) = 0.0\",\r\n    \"NOISEUV('NOISEUV', float) = 0.0\",\r\n    \"FLOWMAP('FLOWMAP', float) = 0.0\",\r\n    \"BlendMode('BlendMode', float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","particlesystem_transparent_particles_standard.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\n\r\nuniform vec4 u_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nuniform float _EmissionSaturation;\r\nuniform float _OpacitySaturation;\r\nuniform float _ColorMultiplier;\r\n\r\nuniform float COLOR_RAMP;\r\nuniform sampler2D _ColorRamp;\r\nuniform vec4 _ColorRamp_ST;\r\nuniform float COLOR_TINT;\r\nuniform vec4 _BasicColor;\r\nuniform vec4 _SaturatedColor;\r\n\r\nuniform float DISSOLVE_ENABLED;\r\nuniform vec4 _DissolveStep;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform sampler2D _NoiseTex;\r\nuniform vec4 _TintColor;\r\n\r\nuniform float EMISSIVEPOWER;\r\nuniform float _EmissivePower;\r\n\r\nuniform float _ABOffset;\r\n\r\nuniform float _GlobalAlpha;\r\n\r\nin vec2 v_uv;\r\nin vec4 v_color;\r\n\r\nin vec2 v_particledata;\r\nin vec2 v_noiseuv;\r\n\r\nuniform float APPLY_RGB_COLOR_VERTEX;\r\nuniform float NOISE_TEXTURE_EMISSION;\r\nuniform float NOISE_TEXTURE_ALPHA;\r\nuniform float NOISE_TEXTURE_DISSOLVE;\r\n\r\nuniform float BlendMode;\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    vec4 tex = texture(_MainTex, v_uv);\r\n\r\n    vec4 col = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    vec4 vcolor = vec4(1.0, 1.0, 1.0, v_color.w);\r\n\r\n    if( EXTENDED_PARTICLES > 0.5 )\r\n    {\r\n        if( APPLY_RGB_COLOR_VERTEX > 0.5)\r\n        {\r\n            vcolor = v_color;\r\n        }\r\n\r\n        float nEmission = 1.0;\r\n        float nAlpha = 1.0;\r\n        float nDissolve = 1.0;\r\n        \r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            vec3 noise = texture(_NoiseTex, v_noiseuv).xyz;\r\n        \r\n            if( NOISE_TEXTURE_EMISSION > 0.5)\r\n            {\r\n                nEmission = noise.x;\r\n            }\r\n            else\r\n            {\r\n                nEmission = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_ALPHA > 0.5)\r\n            {\r\n                nAlpha = noise.y;\r\n            }\r\n            else\r\n            {\r\n                nAlpha = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_DISSOLVE > 0.5)\r\n            {\r\n                nDissolve = noise.z;\r\n            }\r\n            else\r\n            {\r\n                nDissolve = 1.0;\r\n            }\r\n        }\r\n    \r\n        if( DISSOLVE_ENABLED > 0.5)\r\n        {\r\n            float ramp = -1.0 + (v_particledata.x * 2.0);\r\n            col.a = clamp(tex.g * smoothstep(_DissolveStep.x, _DissolveStep.y, (tex.b + ramp) * nDissolve) * _OpacitySaturation * vcolor.w * nAlpha, 0.0, 1.0);\r\n        }\r\n        else\r\n        {\r\n            col.a = clamp(tex.g * _OpacitySaturation * vcolor.w, 0.0, 1.0) * nAlpha;\r\n        }\r\n    \r\n        float lerpValue = 0.0;\r\n        if(COLOR_TINT < 0.5)\r\n        {\r\n            lerpValue = clamp(tex.r * v_particledata.y * _ColorMultiplier * nEmission, 0.0, 1.0);\r\n        }\r\n    \r\n        if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5)\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * _EmissionSaturation;\r\n                }\r\n            }\r\n            col.a *= _GlobalAlpha;\r\n        }\r\n        else\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * col.a * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5 )\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation * col.a;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * col.a * _EmissionSaturation;\r\n                }\r\n            }\r\n            col *= _GlobalAlpha;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if( 3.5 < BlendMode && BlendMode < 4.5 ) //4\r\n        {\r\n            tex *= _TintColor;\r\n            float luminance = clamp(dot(tex, vec4(0.2126, 0.7152, 0.0722, 0.0)) * tex.a * _ABOffset, 0.0, 1.0);\r\n            vec4 one = vec4(1, 1, 1, 1);\r\n            col = mix(2.0 * (v_color * tex), one - 2.0 * (one - v_color) * (one - tex), luminance);\r\n        }\r\n        else\r\n        {\r\n            col = v_color * tex;\r\n            col *= _TintColor;\r\n        \r\n            if( EMISSIVEPOWER > 0.5)\r\n            {\r\n                col *= _EmissivePower;\r\n            }\r\n            \r\n            if( 0.5 < BlendMode && BlendMode < 1.5 ) //1\r\n            {\r\n                col.rgb *= col.a;\r\n            }\r\n            else\r\n            {\r\n                if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n                {\r\n                    col *= 2.0;\r\n                }\r\n                else\r\n                {\r\n                    if( 1.5 < BlendMode && BlendMode < 2.5 ) //2\r\n                    {\r\n                        col *= 4.0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        col *= _GlobalAlpha;\r\n\r\n    }\r\n\r\n    color = col;\r\n}","particlesystem_transparent_particles_standard.vs.glsl":"#version 300 es\r\n\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform vec4 _Panning;\r\nuniform float glstate_timer;\r\n\r\nuniform vec4 _NoiseTex_ST;\r\nuniform vec4 _NoisePanning;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nout vec2 v_uv;\r\nout vec4 v_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nout vec2 v_particledata;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform float NOISEUV;\r\nout vec2 v_noiseuv;\r\n\r\n\r\n\r\nin vec3 a_particle_position;\r\nin vec3 a_particle_scale;\r\nin vec3 a_particle_rotation;\r\nin vec4 a_particle_color;\r\nin vec4 a_particle_tilingOffset;\r\nin vec2 a_particle_flipUV;\r\n\r\nuniform mat4 u_particle_billboardMatrix;\r\n\r\n\r\nmat3 makeParticleRotationMatrix(vec3 rotation)\r\n{\r\n    float DEG2RAD = 3.1415926 / 180.0;\r\n    \r\n    float rx = rotation.x * DEG2RAD;\r\n    float ry = rotation.y * DEG2RAD;\r\n    float rz = rotation.z * DEG2RAD;\r\n\r\n    float sinX = sin(rx);\r\n    float cosX = cos(rx);\r\n    float sinY = sin(ry);\r\n    float cosY = cos(ry);\r\n    float sinZ = sin(rz);\r\n    float cosZ = cos(rz);\r\n\r\n    mat3 tmp;\r\n    float ce = cosY * cosZ;\r\n    float cf = cosY * sinZ;\r\n    float de = sinY * cosZ;\r\n    float df = sinY * sinZ;\r\n\r\n    float te0 = ce + df * sinX;\r\n    float te4 = de * sinX - cf;\r\n    float te8 = cosX * sinY;\r\n\r\n    float te1 = cosX * sinZ;\r\n    float te5 = cosX * cosZ;\r\n    float te9 = - sinX;\r\n\r\n    float te2 = cf * sinX - de;\r\n    float te6 = df + ce * sinX;\r\n    float te10 = cosX * cosY;\r\n\r\n    tmp[0] = vec3(te0, te1, te2);\r\n    tmp[1] = vec3(te4, te5, te6);\r\n    tmp[2] = vec3(te8, te9, te10);\r\n            \r\n    return tmp;\r\n}\r\n\r\nvec4 particleAnimation(vec4 position) \r\n{\r\n    mat3 billboardMatrix = mat3(u_particle_billboardMatrix[0].xyz,u_particle_billboardMatrix[1].xyz,u_particle_billboardMatrix[2].xyz);\r\n    \r\n    // 计算缩放\r\n    position.xyz = position.xyz * a_particle_scale.xyz;\r\n\r\n    // 计算旋转\r\n    mat3 rMat = makeParticleRotationMatrix(a_particle_rotation.xyz);\r\n    position.xyz = rMat * position.xyz;\r\n    position.xyz = billboardMatrix * position.xyz;\r\n\r\n    // 位移\r\n    position.xyz = position.xyz + a_particle_position.xyz;\r\n\r\n    // 颜色\r\n    v_color = a_particle_color * _glesColor;\r\n\r\n    if(a_particle_flipUV.x > 0.5) v_uv.x = 1.0 - v_uv.x;\r\n    if(a_particle_flipUV.y > 0.5) v_uv.y = 1.0 - v_uv.y;\r\n    v_uv = v_uv * a_particle_tilingOffset.xy + a_particle_tilingOffset.zw;\r\n    \r\n    return position;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n\r\n    position = particleAnimation(position);\r\n    \r\n    gl_Position = glstate_matrix_mvp * position;\r\n    v_uv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_Panning.xy * glstate_timer);\r\n    // v_color = _glesColor;\r\n    // v_color = vec4(1.0,1.0,1.0,1.0);\r\n\r\n    if(EXTENDED_PARTICLES > 0.5)\r\n    {\r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            if( NOISEUV > 0.5)\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _NoiseTex_ST.xy + _NoiseTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n            else\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // v_particledata = _glesMultiTexCoord0.zw;\r\n        v_particledata = _glesMultiTexCoord0;\r\n    }\r\n}","particles_add.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_add_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_diffuse.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"showface\": \"ccw\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particle_mask_add_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"par_mask_tint\",\r\n                \"fs\": \"par_mask_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particle_mask_blend_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"par_mask_tint\",\r\n                \"fs\": \"par_mask_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","par_mask_tint.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _Main_Tex; \r\nuniform sampler2D _Mask; \r\n\r\nin mediump vec2 _maintex_uv;\r\nin mediump vec2 _mask_uv;\r\n\r\nin mediump vec4 v_color;\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main()    \r\n{\r\n    highp vec4 basecolor=texture(_Main_Tex,_maintex_uv);\r\n    highp vec4 maskcolor=texture(_Mask,_mask_uv);\r\n\r\n    mediump vec3 tempcolor=v_color.rgb*basecolor.rgb*maskcolor.rgb;\r\n    mediump float tempAlpha=v_color.a*basecolor.a*maskcolor.a;\r\n    mediump vec4 emission=vec4(tempcolor,tempAlpha);\r\n    \r\n    color = emission;\r\n}\r\n","par_mask_tint.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 3) in highp vec4    _glesColor;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform mediump vec4 _Main_Tex_ST;\r\nuniform mediump vec4 _Mask_ST;\r\nout mediump vec2 _maintex_uv;\r\nout mediump vec2 _mask_uv;\r\n\r\nuniform mediump vec4 _Main_Color;\r\nuniform mediump float _mixColorRate;\r\nuniform mediump float _mixAlphaRate;\r\n\r\nout mediump vec4 v_color;\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\tposition =glstate_matrix_mvp * position;\r\n\t \r\n    _maintex_uv = _glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\r\n\tv_color=_glesColor*_Main_Color;\r\n\tv_color.rgb=v_color.rgb*_mixColorRate;\r\n\tv_color.a=v_color.a*_mixAlphaRate;\r\n\r\n\tgl_Position = position;\r\n}","pbr.fs.glsl":"#version 300 es\r\n\r\n// #ifdef TEXTURE_LOD\r\n// #extension GL_EXT_shader_texture_lod : enable\r\n// #endif\r\n\r\n#define TEXTURE_LOD\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI          3.141592653589\r\n#define GAMMA 2.2\r\n\r\n// uniform vec4 light_1;\r\n// uniform vec4 light_2;\r\n\r\nuniform float diffuseIntensity;\r\nuniform float specularIntensity;\r\nuniform float uvRepeat;\r\nuniform float alphaCutoff;      //alphaCutoff\r\n\r\nuniform lowp float glstate_lightcount;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp vec4 glstate_vec4_lightcolors[8];\r\nuniform lowp float glstate_float_lightrange[8];\r\nuniform lowp float glstate_float_lightintensity[8];\r\n\r\nuniform samplerCube u_env;      // IBL\r\nuniform samplerCube u_diffuse;  // diffuse\r\nuniform float u_Exposure;\r\n// uniform sampler2D brdf;       // BRDF LUT\r\nuniform vec4 glstate_eyepos;\r\n\r\n// PBR 材质贴图\r\nuniform sampler2D uv_Normal;\r\nuniform sampler2D uv_Basecolor;\r\nuniform sampler2D uv_MetallicRoughness;\r\nuniform sampler2D uv_AO;\r\nuniform sampler2D uv_Emissive;\r\n\r\n// Customize value\r\nuniform vec4 CustomBasecolor;\r\nuniform float CustomMetallic;\r\nuniform float CustomRoughness;\r\nuniform vec4 CustomEmissiveColor;\r\n\r\n#define TEX_FORMAT_METALLIC     rgb\r\n#define TEX_FORMAT_ROUGHNESS    a\r\n\r\nin vec3 v_pos;\r\nin vec2 xlv_TEXCOORD0;\r\nin mat3 TBN;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp float glstate_lightmapRGBAF16;\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nvec4 sRGBtoLINEAR(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(GAMMA)), color.a);\r\n}\r\nvec4 LINEARtoSRGB(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(1.0 / GAMMA)), color.a);\r\n}\r\n\r\nvec3 toneMapACES(vec3 color) {\r\n    const float A = 2.51;\r\n    const float B = 0.03;\r\n    const float C = 2.43;\r\n    const float D = 0.59;\r\n    const float E = 0.14;\r\n    return pow(clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0), vec3(1.0 / GAMMA));\r\n}\r\n\r\nvec2 DFGApprox(float NoV, float roughness) {\r\n    float dotNV = clamp(NoV, 0., 1.);\r\n    vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\r\n    vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\r\n    vec4 r = roughness * c0 + c1;\r\n    float a004 = min(r.x * r.x, exp2(-9.28 * dotNV)) * r.x + r.y;\r\n    return vec2(-1.04, 1.04) * a004 + r.zw;\r\n}\r\n\r\n// Fresnel - F0 = Metalness\r\nvec3 F_Schlick(float VoH, vec3 F0) {\r\n    return F0 + (vec3(1.0) - F0) * pow(1.0 - VoH, 5.0);\r\n}\r\n\r\n// Geometric\r\n// >    Schlick with k = α/2 matches Smith very closely\r\nfloat G_UE4(float NoV, float NoH, float VoH, float NoL, float roughness) {\r\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\r\n    float l = NoL / (NoL * (1.0 - k) + k);  // There are another version which use NoH & LoH\r\n    float v = NoV / (NoV * (1.0 - k) + k);\r\n    return l * v;\r\n}\r\n\r\n// a (alphaRoughness) = Roughness\r\n// Distribution AKA normal distribution function (NDF)\r\n// Trowbridge-Reitz\r\nfloat D_GGX(float a, float NoH) {\r\n    a = a * a;\r\n    // float f = (NoH * a - NoH) * NoH + 1.0;  // NoH * NoH * (a - 1.0) + 1.0;\r\n    float f = NoH * NoH * (a - 1.0) + 1.0;\r\n    return a / (PI * f * f);\r\n}\r\n\r\n// mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv){\r\n//     // get edge vectors of the pixel triangle\r\n//     vec3 dp1 = dFdx( p );\r\n//     vec3 dp2 = dFdy( p );\r\n//     vec2 duv1 = dFdx( uv );\r\n//     vec2 duv2 = dFdy( uv );\r\n\r\n//     // solve the linear system\r\n//     vec3 dp2perp = cross( dp2, N );\r\n//     vec3 dp1perp = cross( N, dp1 );\r\n//     vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\r\n//     vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n//     // construct a scale-invariant frame\r\n//     float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\r\n//     return mat3( T * invmax, B * invmax, N );\r\n// }\r\n\r\n// decode RGBE data after LOD due to RGB32F mipmap issue\r\n vec3 decoRGBE(vec4 r) {\r\n    if(r.a != 0. && r.a <= 0.7372549019607844) {    //判读 0.7372 避免 expVal > 60 后出现问题。 \r\n        float expVal = r.a * 255. - 128.;\r\n        float e = exp2(expVal);\r\n        return vec3(r.r * e, r.g * e, r.b * e);\r\n    }\r\n    return  vec3(0.0);\r\n}\r\n\r\nstruct st_core {\r\n    vec4 diffuse;\r\n    vec3 f0;\r\n    vec3 N;\r\n    vec3 V;\r\n    vec3 R;\r\n    float NoV;\r\n    float metallic;\r\n    float roughness;\r\n    float alphaRoughness;\r\n};\r\n\r\nstruct lightData{\r\n    vec3 L;\r\n    float rVal;\r\n};\r\n\r\nst_core init() {\r\n    st_core temp;\r\n\r\n    // PBR Material\r\n    temp.diffuse = (sRGBtoLINEAR(texture(uv_Basecolor, xlv_TEXCOORD0 * uvRepeat)) * CustomBasecolor);\r\n\r\n    vec3 rm = texture(uv_MetallicRoughness, xlv_TEXCOORD0 * uvRepeat).rgb;\r\n    temp.roughness = clamp(rm.g, 0.04, 1.0) * CustomRoughness;\r\n    temp.alphaRoughness = temp.roughness * temp.roughness;\r\n    temp.metallic = clamp(rm.b, 0.0, 1.0) * CustomMetallic;\r\n\r\n    // vec4 AO = sRGBtoLINEAR(texture(uv_AO, xlv_TEXCOORD0 * uvRepeat));\r\n\r\n    vec3 f0 = vec3(0.04);\r\n    temp.f0 = mix(f0, temp.diffuse.xyz, temp.metallic);\r\n\r\n    temp.diffuse.rgb = temp.diffuse.rgb * (vec3(1.) - f0) * (1. - temp.metallic);\r\n    // temp.diffuse/=PI;\r\n\r\n    temp.V = normalize(glstate_eyepos.xyz - v_pos);\r\n    // mat3 TBN = cotangent_frame(temp.N, temp.V, xlv_TEXCOORD0 * uvRepeat);\r\n    vec3 normalAddation = texture(uv_Normal, xlv_TEXCOORD0 * uvRepeat).rgb * 2. - 1.;\r\n    temp.N = normalize(TBN * normalAddation);\r\n\r\n    temp.NoV = clamp(abs(dot(temp.N, temp.V)), 0.001, 1.0);\r\n    temp.R = -normalize(reflect(temp.V, temp.N));\r\n\r\n    return temp;\r\n}\r\n\r\nvec3 lightBRDF(lightData ld, st_core core) {\r\n    vec3 L = normalize(ld.L);\r\n    vec3 H = normalize(core.V + L);\r\n\r\n    float NoL = clamp(dot(core.N, L), 0.001, 1.0);\r\n    float NoH = clamp(dot(core.N, H), 0.0, 1.0);\r\n    // float LoH = clamp(dot(L, H), 0.0, 1.0);\r\n    float VoH = clamp(dot(core.V, H), 0.0, 1.0);\r\n\r\n    // vec3 diffuse = core.Basecolor.rgb * NoL / PI;\r\n\r\n    vec3 F = F_Schlick(VoH, core.f0);\r\n    float G = G_UE4(core.NoV, NoH, VoH, NoL, core.roughness);\r\n    float D = D_GGX(core.alphaRoughness, NoH);\r\n    \r\n    //直接光照(镜面反射)\r\n    vec3 specContrib = F * G * D / (4.0 * NoL * core.NoV);\r\n    //间接光照(漫反射)\r\n    vec3 diffuseContrib = (1.0 - F) * core.diffuse.rgb / PI;\r\n\r\n    // vec3 color = NoL * (diffuseContrib + specContrib);\r\n    vec3 color = ld.rVal * (diffuseContrib + specContrib);\r\n\r\n    return color;\r\n}\r\n\r\n//calcLight 计算灯光数据函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlightData calcLight(vec3 N,vec3 worldpos,vec4 lightPos,vec4 lightDir,float cosspot,float range)\r\n{\r\n    lightData ld;\r\n\r\n    vec3 v3 = lightPos.xyz - worldpos;\r\n    float len = length(v3);\r\n    len = len > range ? range : len;\r\n    //求入射角，点光源&聚光灯\r\n    vec3 L = normalize(v3); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    vec3 L2 = -lightDir.xyz;\r\n    float dotSpot = dot(L,L2);\r\n    float spotVal = smoothstep(cosspot , 1.0 , dotSpot);\r\n    float atten = pow(1.0 - len/range , 3.0);\r\n\r\n    //光方向\r\n    ld.L = mix(L2 , L , lightPos.w);\r\n    float NoL = clamp(dot(N , ld.L) , 0.0 , 1.0);\r\n\r\n    //反射度\r\n    float r = NoL * atten;                       //点光 和 射灯\r\n    r *= mix(1.0 , spotVal , lightDir.w);        // lightDir.w = 0 点光, w = 1 射灯 (有角度约束)\r\n    float rDir = NoL;                            //方向光\r\n    ld.rVal = mix(rDir , r , lightPos.w);        //lightPos.w = 0 方向光 ，w = 1 点光 和 射灯\r\n\r\n    return ld;\r\n}\r\n\r\nout vec4 color; \r\nvoid main() {\r\n    //alpha Test\r\n    vec4 baseTex = texture(uv_Basecolor, xlv_TEXCOORD0 * uvRepeat);\r\n    if(baseTex.a < alphaCutoff){\r\n        discard;\r\n    }\r\n\r\n    st_core c = init();\r\n    float lod = clamp(c.roughness * 10.0, 0.0, 11.0);\r\n    vec3 directL;\r\n\r\n    //实时灯光 直接光照 照明贡献计算----------------------------\r\n    // vec2 envBRDF    = texture(brdf, vec2(clamp(c.NoV, 0.0, 0.9999999), clamp(1.0-c.Roughness, 0.0, 0.9999999))).rg;\r\n    // int lightCount = int(min(3., glstate_lightcount));\r\n    int lightCount = int(glstate_lightcount);\r\n    if (lightCount > 0) {\r\n        for (int i = 0; i < 8; i++) {\r\n            if (i >= lightCount) break;\r\n            lightData ld = calcLight(c.N,v_pos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n            directL += lightBRDF(ld , c) * glstate_vec4_lightcolors[i].rgb * glstate_float_lightintensity[i];\r\n        }\r\n    }\r\n\r\n    //环境 间接光照 照明贡献计算----------------------------\r\n    vec2 brdf = DFGApprox(c.NoV, c.roughness);\r\n    //镜面反射\r\n    #ifdef TEXTURE_LOD\r\n        // vec3 IBLColor = decoRGBE(textureCubeLodEXT(u_env, c.R, lod));\r\n        vec3 IBLColor = decoRGBE(textureLod(u_env, c.R, lod));\r\n    #else\r\n        vec3 IBLColor = decoRGBE(texture(u_env, c.R));\r\n    #endif\r\n    vec3 IBLspecular = 1.0 * IBLColor * (c.f0 * brdf.x + brdf.y);\r\n    vec3 indirectSpec = IBLspecular * specularIntensity;\r\n\r\n    //漫反射\r\n    #ifdef TEXTURE_LOD\r\n        // vec3 indirectDiff = c.diffuse.rgb * decoRGBE(textureCubeLodEXT(u_diffuse, c.R, lod)) * diffuseIntensity;\r\n        vec3 indirectDiff = c.diffuse.rgb * decoRGBE(textureLod(u_diffuse, c.R, lod)) * diffuseIntensity;\r\n    #else\r\n        vec3 indirectDiff = c.diffuse.rgb * decoRGBE(texture(u_diffuse, c.R)) * diffuseIntensity;\r\n    #endif\r\n\r\n    //照明合并\r\n    vec3 finalColor = directL + indirectSpec + indirectDiff;\r\n    // vec3 finalColor = c.N;\r\n\r\n#ifdef LIGHTMAP\r\n    //有lightMap 时，用lightmap 贡献一部分 间接光照\r\n    vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    vec3 lightMapColor;\r\n    if(glstate_lightmapRGBAF16 == 1.0){\r\n        // finalColor.xyz *= lightmap.xyz;\r\n        lightMapColor = sRGBtoLINEAR(lightmap).rgb;\r\n    }else{\r\n        // finalColor.xyz *= decode_hdr(lightmap);\r\n        lightMapColor = decode_hdr(lightmap);\r\n    }\r\n\r\n    // finalColor += c.diffuse.rgb * lightMapColor;\r\n    finalColor += c.diffuse.rgb * lightMapColor * diffuseIntensity;\r\n#endif\r\n\r\n    //emission\r\n    finalColor += sRGBtoLINEAR(texture(uv_Emissive, xlv_TEXCOORD0 * uvRepeat)).rgb * CustomEmissiveColor.rgb;\r\n    \r\n    //AO + Exposure\r\n    finalColor *= u_Exposure * texture(uv_AO, xlv_TEXCOORD0 * uvRepeat).r;\r\n\r\n\r\n    //色调映射 （HDR -> LDR）\r\n    finalColor = toneMapACES(finalColor);\r\n\r\n#ifdef FOG\r\n    finalColor.xyz = mix(glstate_fog_color.rgb, finalColor.rgb, factor);\r\n#endif\r\n\r\n    // color = vec4(finalColor, c.diffuse.a);\r\n    color = vec4(finalColor, c.diffuse.a);\r\n}","pbr.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr.vs.glsl":"#version    300 es\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nlayout(location = 2) in highp vec3    _glesTangent;\t//w 被乘到了分量里 x = x*w , y = y*w , z = z*w , 且 w 被做了 +2 的偏移映射。\r\nlayout(location = 3) in highp vec3    _glesColor;\r\n\r\nuniform highp mat4      glstate_matrix_mvp;\r\nuniform highp mat4      glstate_matrix_model;\r\nuniform highp mat4      glstate_matrix_it_modelview;\r\n\r\nout highp vec3      v_pos;\r\nout highp vec2      xlv_TEXCOORD0;\r\nout highp mat3\t\tTBN;\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec2 _glesMultiTexCoord1;\r\nuniform lowp float glstate_lightmapUV;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nmat4 blendMat ;\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat* srcVertex;\r\n}\r\n#endif\r\n\r\n//获取 tangent 的 W 值\r\nlowp float tangentW(lowp vec3 _tangent){\r\n\treturn sqrt(_tangent.x * _tangent.x + _tangent.y * _tangent.y + _tangent.z * _tangent.z) - 2.0;\r\n}\r\n\r\n//计算 TBN 矩阵-----------------\r\nmat3 calTBNMatrix(highp mat4 _m_mat,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n\r\n    vec3 normal = normalize(mat3(_m_mat) * normalize(_normal));\r\n    vec3 tangent = normalize(mat3(_m_mat) * normalize(_tangent));\r\n    vec3 binormal = cross( normal , tangent) * tangentW(_tangent);\r\n  \treturn mat3(tangent,binormal,normal);\r\n}\r\n//-----------------------------\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n    //求世界空间法线\r\n#ifdef SKIN\r\n    vec3 _n = normalize(mat3(blendMat) * _glesNormal);\r\n#else\r\n    vec3 _n = _glesNormal;\r\n#endif\r\n\tTBN = calTBNMatrix(glstate_matrix_it_modelview , _n , _glesTangent);\r\n}\r\n\r\nvoid main () {\r\n    highp vec4 position = vec4(_glesVertex,1.0);\r\n\r\n#ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = (1.0 - glstate_lightmapUV) * _glesMultiTexCoord0  + glstate_lightmapUV * _glesMultiTexCoord1;\t//unity lightMap UV ,优先使用UV1,次之UV0 \r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n#endif\r\n\r\n#ifdef SKIN\r\n    position = calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n#endif\r\n\t//normal\r\n\tcalcNormal(position);\r\n\t//world pos\r\n    vec4 wpos\t\t= (glstate_matrix_model * position);\r\n\tv_pos\t\t\t= wpos.xyz / wpos.w;\r\n    //texcoord\r\n\txlv_TEXCOORD0   = _glesMultiTexCoord0;\r\n\r\n\t// // TBN\r\n    // vec3 N        \t= normalize((glstate_matrix_it_modelview * vec4(_glesNormal, 0.0)).xyz);\r\n\t// vec3 tangent \t= normalize((glstate_matrix_it_modelview * vec4(_glesTangent, 0.0)).xyz);\r\n\t// vec3 bitangent \t= cross(N, tangent) * tangentW(_glesTangent);// * _glesTangent.w;\r\n\t// TBN = mat3(tangent, bitangent, N);\r\n\t// TBN = calTBNMatrix(glstate_matrix_it_modelview , _glesNormal , _glesTangent);\r\n\r\n\tposition = glstate_matrix_mvp * position;\r\n\r\n#ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n#endif\r\n\r\n    gl_Position\t= position;\r\n}","pbrMR.fs.glsl":"#version 300 es\r\n\r\nprecision mediump  float;\r\n\r\n#define PI 3.14159265358979\r\n#define GAMMA 2.2\r\n\r\nuniform lowp sampler2D uv_Basecolor;\r\nuniform lowp sampler2D uv_Normal;\r\nuniform sampler2D brdf;\r\nuniform samplerCube u_sky;// IBL\r\nuniform samplerCube u_sky_1;// IBL\r\nuniform samplerCube u_sky_2;// IBL\r\nuniform samplerCube u_sky_3;// IBL\r\nuniform samplerCube u_sky_4;// IBL\r\nuniform lowp vec4 _MainColor;\r\nuniform vec4 glstate_eyepos;\r\n\r\nin vec3 v_pos;\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin highp vec4 v_color;\r\n\r\nin vec3 v_normal;\r\nin mat3 TBN;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\n#define fixedAmbient    vec4(1, 1, 1, 1.0)\r\n#define LIGHT_COLOR     vec4(1)\r\n#define LIGHT_DIRECTION vec3(0, 1, 0)\r\n#define DIFFUSE_CTB     dot(normalize(v_normal.xyz), normalize(LIGHT_DIRECTION))\r\n#define DIFFUSE         (DIFFUSE_CTB * 0.5) * LIGHT_COLOR\r\n\r\n#define METALLIC    0.1\r\n#define ROUGHNESS   0.7\r\n\r\n// uniform float ROUGHNESS;\r\n// uniform float METALLIC;\r\n\r\n//texture2DEtC1Mark\r\n\r\nvec4 sRGBtoLINEAR(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(GAMMA)), color.a);\r\n}\r\nvec4 LINEARtoSRGB(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(1.0/GAMMA)), color.a);\r\n}\r\n\r\n\r\n// Fresnel - F0 = Metalness\r\nvec3 F_Schlick(float VoH, vec3 F0) {\r\n    return F0 + (vec3(1) - F0) * pow(1.0 - VoH, 5.0);\r\n}\r\n// vec3 Fresnel_CookTorrance(float VoH, vec3 F0) {\r\n// }\r\nvec3 F_UE4(float VoH, vec3 F0) {\r\n    return F0 + (vec3(1.0) - F0) * pow(2.0, (-5.55473 * VoH - 6.98316) * VoH);\r\n}\r\n\r\n\r\n// Geometric\r\nfloat G_CookTorrance(float NoV, float NoH, float VoH, float NoL) {\r\n    return min(min(2.0 * NoV * NoH / VoH, 2.0 * NoL * NoH / VoH), 1.0);\r\n}\r\n// >    Schlick with k = α/2 matches Smith very closely\r\nfloat G_UE4(float NoV, float NoH, float VoH, float NoL, float roughness) {\r\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\r\n    float l = NoL / (NoL * (1.0 - k) + k);  // There are another version which use NoH & LoH\r\n    float v = NoV / (NoV * (1.0 - k) + k);\r\n    return l * v;\r\n}\r\n\r\n\r\n// a (alphaRoughness) = Roughness\r\n// Distribution AKA normal distribution function (NDF)\r\n// Trowbridge-Reitz\r\nfloat D_GGX(float a, float NoH) {\r\n    a = a * a;\r\n    // float f = (NoH * a - NoH) * NoH + 1.0;  // NoH * NoH * (a - 1.0) + 1.0;\r\n    float f = NoH * NoH * (a - 1.0) + 1.0;\r\n    return a / (PI * f * f);\r\n}\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    //color = v_color;\r\n\r\n    vec4 base = sRGBtoLINEAR(texture(uv_Basecolor, xlv_TEXCOORD0));\r\n    // vec4 base = sRGBtoLINEAR(vec4(0.8, 0.69, 0.13,1));\r\n    // if(base.a < 0.1)\r\n    //     discard;\r\n\r\n\r\n\r\n    vec4 fristColor = vec4(v_color.rgb, 1);\r\n    vec3 normalAddation = texture(uv_Normal, xlv_TEXCOORD0).rgb * 2.0 - 1.0;\r\n\r\n    vec3 L = normalize(LIGHT_DIRECTION);\r\n    vec3 N = normalize(TBN * normalAddation);\r\n    // vec3 N = normalize(v_normal);\r\n    vec3 V = normalize(glstate_eyepos.xyz - v_pos);\r\n    vec3 H = normalize(V + L);\r\n    vec3 R = -normalize(reflect(V, N));\r\n\r\n    float NoL = clamp(dot(N, L), 0.001, 1.0);\r\n    float NoV = clamp(abs(dot(N, V)), 0.001, 1.0);\r\n    float NoH = clamp(dot(N, H), 0.0, 1.0);\r\n    float LoH = clamp(dot(L, H), 0.0, 1.0);\r\n    float VoH = clamp(dot(V, H), 0.0, 1.0);\r\n\r\n    float roughness = clamp(ROUGHNESS, 0.04, 1.0);\r\n    float alphaRoughness = roughness * roughness;\r\n    float metallic = clamp(METALLIC, 0.0, 1.0);\r\n\r\n    vec3 f0 = vec3(0.04);\r\n    f0 = mix(f0, base.rgb, metallic);\r\n\r\n    vec3 diffuse = base.rgb * (vec3(1) - f0);\r\n    diffuse *= 1.0 - metallic;\r\n    // diffuse /= PI;\r\n\r\n    vec3 F = F_Schlick(VoH, f0);\r\n    float G = G_UE4(NoV, NoH, VoH, NoL, roughness);\r\n    // float G = G_CookTorrance(NoV, NoH, VoH, NoL);\r\n    float D = D_GGX(alphaRoughness, NoH);\r\n\r\n    vec3 specContrib = F * G * D / (4.0 * NoL * NoV);\r\n    vec3 diffuseContrib = (1.0 - F) * diffuse * (1.0 - metallic);\r\n    vec3 _color = NoL * LIGHT_COLOR.xyz * (diffuseContrib + specContrib * 10.0);\r\n    // color += fixedAmbient.rgb * 0.3;\r\n\r\n\r\n    // IBL\r\n    vec3 brdf = sRGBtoLINEAR(texture(brdf, vec2(NoV, 1.0 - alphaRoughness))).rgb;\r\n    // vec3 IBLcolor = vec3(1);\r\n    vec3 IBLcolor = vec3(1, 0.6, 0);\r\n    // vec3 IBLcolor = sRGBtoLINEAR(texture(envTex, R)).rgb + vec3(0.5);\r\n\r\n    vec3 IBLspecular = 1.0 * IBLcolor * (f0 * brdf.x + brdf.y);\r\n    _color += IBLspecular;\r\n    _color += IBLspecular;\r\n    _color += IBLspecular;\r\n    _color += IBLspecular;\r\n    // color += IBLspecular;\r\n    // color += IBLspecular;\r\n    // color += IBLspecular;\r\n\r\n\r\n    // Diffuse\r\n    vec4 emission = (fristColor * vec4(_color, 1)) + (fristColor * fixedAmbient);\r\n\r\n\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, v_color.a);\r\n    #endif\r\n\r\n    // color = LINEARtoSRGB(emission);\r\n    // color = LINEARtoSRGB(vec4(V, 1));\r\n    color = LINEARtoSRGB(vec4(_color,1.0));\r\n    // color = LINEARtoSRGB(vec4(IBLspecular * 2.0, 1));\r\n    // color = LINEARtoSRGB(vec4(pow(1.0 - NoV, 5.0)));\r\n    // color = LINEARtoSRGB(vec4(G));\r\n    // color = LINEARtoSRGB(vec4(G));\r\n    // color = LINEARtoSRGB(vec4(D));\r\n}","pbrMR.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_NormalTex('NormalTex', Texture) = 'white'{}\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbrMR\",\r\n                \"fs\": \"pbrMR\"\r\n            }\r\n        ],\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbrMR\",\r\n                \"fs\": \"pbrMR\"\r\n            }\r\n        ]\r\n    }\r\n}","pbrMR.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;\r\n\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nlayout(location = 2) in highp vec3    _glesTangent;\r\n\r\nuniform highp mat4      glstate_matrix_mvp;\r\nuniform highp mat4      glstate_matrix_model;\r\nuniform highp mat4      glstate_matrix_world2object;\r\n\r\nout highp vec3 v_N;\r\nout mat3 TBN;\r\n\r\n#ifdef FOG\r\nout lowp float factor;\r\n#endif\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\nlayout(location = 3) in vec4 _glesColor;\r\nout highp vec4 v_color;\r\n\r\nout vec3 v_pos;\r\n\r\n#define DIST\t20.0\r\n#define FOG_far\t100.0\r\n\r\n\r\nlowp mat3 calBTNMatrix(lowp mat3 NormalMatToWorld,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n    lowp vec3 normal=normalize(NormalMatToWorld*_normal);\r\n    lowp vec3 tangent=normalize(NormalMatToWorld*_tangent);\r\n    lowp vec3 binormal=cross(normal,tangent);\r\n  \treturn (mat3(tangent,binormal,normal));\r\n\r\n}\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    mat3 normalmat = mat3(glstate_matrix_model);\r\n   \tTBN=calBTNMatrix(normalmat,_glesNormal,_glesTangent);\r\n\r\n\r\n    v_N = _glesNormal;\r\n    // // v_N = normalize(glstate_matrix_world2object*vec4(v_N, 1)).xyz;\r\n    // v_N = normalize(glstate_matrix_model*vec4(v_N, 1)).xyz;\r\n\r\n    // vec3 tangent = normalize(vec3(glstate_matrix_model * vec4(_glesTangent.xyz, 0)));\r\n    // vec3 bitangent = cross(v_N, tangent) * 1.0;\r\n    // TBN = mat3(tangent, bitangent, v_N);\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;\r\n\r\n    v_pos = (glstate_matrix_model * vec4(_glesVertex.xyz,1.0)).xyz;\r\n    // v_pos = _glesVertex.xyz;\r\n\r\n    #ifdef FOG\r\n    highp float x = position.z;\r\n    x = clamp(x,0.0,FOG_far);\r\n    highp float a = 2.0*FOG_far/x -1.0;\r\n    factor = 1.0 - 1.0/a;\r\n    #endif\r\n\tv_color = _glesColor;\r\n    gl_Position =position;\r\n}","pbr_2sided.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr_blend.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr_blend_2sided.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr_sss.fs.glsl":"#version 300 es\r\n\r\n// #extension GL_OES_standard_derivatives : enable\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI          3.141592653589\r\n\r\nuniform vec4        light_1;\r\nuniform vec4        light_2;\r\n\r\nuniform samplerCube u_sky;      // IBL\r\nuniform samplerCube u_sky_1;    // IBL\r\nuniform samplerCube u_sky_2;    // IBL\r\nuniform samplerCube u_sky_3;    // IBL\r\nuniform samplerCube u_sky_4;    // IBL\r\n\r\nuniform sampler2D   brdf;       // BRDF LUT\r\nuniform vec4        glstate_eyepos;\r\n\r\n// PBR 材质贴图\r\nuniform sampler2D   uv_Normal;\r\nuniform sampler2D   uv_Basecolor;\r\nuniform sampler2D   uv_MetallicRoughness;\r\nuniform sampler2D   uv_AO;\r\n\r\n// Customize value\r\nuniform vec4        CustomBasecolor;\r\nuniform float       CustomMetallic;\r\nuniform float       CustomRoughness;\r\nuniform sampler2D   uv_Thickness;\r\n\r\n#define TEX_FORMAT_METALLIC     rgb\r\n#define TEX_FORMAT_ROUGHNESS    a\r\n\r\nin vec3        v_normal;\r\nin vec3        v_pos;\r\nin vec2        xlv_TEXCOORD0;\r\n\r\n//textureEtC1Mark\r\n\r\nvec3 Fresnel(vec3 f0, float LoN, float roughness) {\r\n    return f0 + (max(vec3(1.0 - roughness), f0) - f0) * pow(1.0 - LoN, 5.0);\r\n}\r\n\r\nfloat Distribution(float roughness, float NoH) {\r\n    float alpha = roughness * roughness;\r\n    float alphaSq = alpha * alpha;\r\n    float NoHsqr = NoH * NoH;\r\n    return alphaSq / (pow( NoHsqr * alphaSq - NoHsqr + 1.0, 2.0) * PI);;\r\n}\r\n\r\nfloat Geometric(float roughness, float NoL, float NoV) {\r\n    float k = pow(roughness + 1.0, 2.0) / 8.0;\r\n    float Gl = NoL / ((NoL - NoL * k) + k);\r\n    float Gv = NoV / ((NoV - NoV * k) + k);\r\n    return Gl * Gv;\r\n}\r\n\r\nmat3 cotangent_frame(vec3 N, vec3 p, vec2 uv){\r\n    // get edge vectors of the pixel triangle\r\n    vec3 dp1 = dFdx( p );\r\n    vec3 dp2 = dFdy( p );\r\n    vec2 duv1 = dFdx( uv );\r\n    vec2 duv2 = dFdy( uv );\r\n\r\n    // solve the linear system\r\n    vec3 dp2perp = cross( dp2, N );\r\n    vec3 dp1perp = cross( N, dp1 );\r\n    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\r\n    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n    // construct a scale-invariant frame\r\n    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\r\n    return mat3( T * invmax, B * invmax, N );\r\n}\r\n\r\nvec3 getIBL(float roughness, vec3 r) {\r\n    float a = roughness * 4.0;\r\n\r\n    if ( a < 1.0)   return mix(texture(u_sky, r).rgb, texture(u_sky_1, r).rgb, a);\r\n    if ( a < 2.0)   return mix(texture(u_sky_1, r).rgb, texture(u_sky_2, r).rgb, a - 1.0);\r\n    if ( a < 3.0)   return mix(texture(u_sky_2, r).rgb, texture(u_sky_3, r).rgb, a - 2.0);\r\n    if ( a < 4.0)   return mix(texture(u_sky_3, r).rgb, texture(u_sky_4, r).rgb, a - 3.0);\r\n    // if ( a < 5.0)   return mix(texture(u_sky_4, r).rgb, texture(u_sky_5, r).rgb, a - 4.0);\r\n\r\n    return texture(u_sky_4,r).xyz;\r\n}\r\n\r\nstruct st_core {\r\n    vec3    f0;\r\n    float   Roughness;\r\n    vec4    Basecolor;\r\n    vec4    Normal;\r\n    vec3    Metallic;\r\n    vec4    AO;\r\n    vec3    N;\r\n    vec3    V;\r\n    vec3    L;\r\n    vec3    H;\r\n    vec3    R;\r\n    float   NdotV;\r\n    float   NdotL;\r\n    float   LdotH;\r\n};\r\n\r\nst_core init() {\r\n    st_core temp;\r\n\r\n    // PBR Material\r\n    temp.Basecolor  = texture(uv_Basecolor, xlv_TEXCOORD0) * CustomBasecolor;\r\n    temp.Normal     = texture(uv_Normal, xlv_TEXCOORD0);\r\n    temp.Metallic   = texture(uv_MetallicRoughness, xlv_TEXCOORD0).TEX_FORMAT_METALLIC * 0.01;\r\n    temp.Roughness  = texture(uv_MetallicRoughness, xlv_TEXCOORD0).TEX_FORMAT_ROUGHNESS * 0.5;\r\n    temp.AO         = texture(uv_AO, xlv_TEXCOORD0);\r\n\r\n    vec3 f0 = vec3(0.04);\r\n    temp.f0 = mix(f0, temp.Basecolor.xyz, temp.Metallic);\r\n\r\n    temp.V = normalize(glstate_eyepos.xyz - v_pos);\r\n    temp.N = normalize(v_normal);\r\n    mat3 TBN = cotangent_frame(temp.N, temp.V, xlv_TEXCOORD0);\r\n    vec3 normalAddation = temp.Normal.rgb * 2.0 - 1.0;\r\n    temp.N = normalize(TBN * normalAddation);\r\n    temp.NdotV = abs(dot(temp.N, temp.V));\r\n    temp.R = reflect(-temp.V,temp.N);\r\n\r\n    return temp;\r\n}\r\n\r\nvec3 lightBRDF(vec3 L, st_core c) {\r\n    L = normalize(L);\r\n    vec3 H = normalize(c.V + L);\r\n\r\n    float LoH = max(0.0, dot(L, H));\r\n    float NoH = max(0.0, dot(c.N, H));\r\n    float NoL = max(0.001, dot(c.N, L));\r\n    float NoV = max(0.0, c.NdotV);\r\n    float roughness = clamp(c.Roughness, 0.05, 0.9999999);  // NOTE: in case roughness equal 0\r\n\r\n    vec3 diffuse = c.Basecolor.rgb * NoL / PI;\r\n\r\n    vec3 F = Fresnel(c.f0, LoH, roughness);\r\n    float D = Distribution(roughness, NoH);\r\n    float G = Geometric(roughness, NoL, NoV);\r\n\r\n    vec3 specular = D * F * G / (4.0 * NoL * NoV);\r\n    return max(vec3(0.0), diffuse + specular);\r\n}\r\n\r\nvec3 T(float s) {\r\n  return vec3(0.233, 0.455, 0.649) * exp(-s * s / 0.0064) +\r\n         vec3(0.1,   0.336, 0.344) * exp(-s * s / 0.0484) +\r\n         vec3(0.118, 0.198, 0.0)   * exp(-s * s / 0.187)  +\r\n         vec3(0.113, 0.007, 0.007) * exp(-s * s / 0.567)  +\r\n         vec3(0.358, 0.004, 0.0)   * exp(-s * s / 1.99)   +\r\n         vec3(0.078, 0.0,   0.0)   * exp(-s * s / 7.41);\r\n}\r\nvec3 translucency(vec3 l, st_core c) {\r\n    float thick = 1.0 -texture(uv_Thickness, xlv_TEXCOORD0).r;\r\n    vec3 vLTLight = normalize(l);\r\n    float fLTDot = pow(max(dot(c.N, -vLTLight), 0.4), 2.0) * 1.0;\r\n    vec3 fLT = 1.0 * (fLTDot + 0.0) * thick * T(thick);\r\n    return fLT;\r\n}\r\n\r\nout vec4 color; \r\nvoid main () {\r\n    st_core c = init();\r\n\r\n    vec3 envLight   = texture(u_sky, c.R).xyz;\r\n    vec2 envBRDF    = texture(brdf, vec2(clamp(c.NdotV, 0.0, 0.9999999), clamp(1.0-c.Roughness, 0.0, 0.9999999))).rg;\r\n\r\n    vec3 F = Fresnel(c.f0, c.NdotV, c.Roughness);\r\n    vec3 indirectSpecular = envLight * (F * envBRDF.r + envBRDF.g) * vec3(0.3, 0.4, 0.8);\r\n\r\n    vec3 finalColor = vec3(0.0);\r\n    // finalColor += lightBRDF(vec3(-50.0, 50.0, 80.0), c) * vec3(0.7, 0.5, 0.2);\r\n    finalColor += lightBRDF(vec3(-10.0, 10.0, -10.0), c) * vec3(1.0, 1.0, 1.0);\r\n    finalColor += ((1.0 - F) * (1.0 - c.Metallic) * c.Basecolor.rgb + indirectSpecular) * 0.6; // IBL+PBR\r\n    finalColor += translucency(vec3(-10.0, 10.0, -10.0), c) * vec3(1.0, 1.0, 1.0);\r\n\r\n    // color = vec4(0.0, 1.0, 1.0, 1.0);\r\n    // color = texture(uv_Basecolor, xlv_TEXCOORD0);\r\n    // color = vec4(finalColor, 1.0);\r\n    color = vec4(finalColor, 1.0);\r\n}","pbr_sss.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr_sss\",\r\n                \"fs\": \"pbr_sss\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n\r\n        ],\r\n        \"skin_fog\": [\r\n\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr_sss.vs.glsl":"#version 300 es\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\n\r\nuniform highp mat4      glstate_matrix_mvp;\r\nuniform highp mat4      glstate_matrix_model;\r\nuniform highp mat4      glstate_matrix_world2object;\r\n\r\nout highp vec3      v_normal;\r\nout highp vec3      v_pos;\r\nout highp vec2      xlv_TEXCOORD0;\r\n\r\nvoid main () {\r\n    v_pos           = (glstate_matrix_model * vec4(_glesVertex, 1.0)).xyz;\r\n    v_normal        = normalize((glstate_matrix_world2object * vec4(_glesNormal, 0.0)).xyz);\r\n    xlv_TEXCOORD0   = _glesMultiTexCoord0;\r\n\r\n    gl_Position     = glstate_matrix_mvp * vec4(_glesVertex, 1.0);\r\n}","post_depth.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\n//in highp vec3 xlv_Normal;   \r\n\r\nconst float PackUpscale = 256. / 255.; \r\n// fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; \r\n// 0..1 -> fraction (excluding 1)\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\nconst float ShiftRight8 = 1. / 256.;\r\nvec4 packDepthToRGBA( const in float v ) \r\n{\r\n    vec4 r = vec4( fract( v * PackFactors ), v );\r\n\tr.yzw -= r.xyz * ShiftRight8;\r\n // tidy overflow\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGBAToDepth( const in vec4 v ) \r\n{\r\n    return dot( v, UnpackFactors );\r\n}\r\nvec2 packDepthToRG( const in float v ) \r\n{\r\n    vec2 r = vec2( fract( v * PackFactors.z ), v );\r\n\tr.y -= r.x * ShiftRight8;\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGToDepth( const in vec2 v ) \r\n{\r\n    return dot( v.xy, UnpackFactors.zw );\r\n}\r\nvec3 packDepthToRGB( const in float v ) \r\n{\r\n    vec3 r = vec3( fract( v * PackFactors.yz ), v );\r\n\tr.yz -= r.xy * ShiftRight8;\r\n // tidy overflow\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGBToDepth( const in vec3 v ) \r\n{\r\n    return dot( v.xyz, UnpackFactors.yzw );\r\n}\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    float z = gl_FragCoord.z;// fract(gl_FragCoord.z *256.*256.);\r\n    // highp vec2 normal =xlv_Normal.xy;\r\n    color=packDepthToRGBA(z);\r\n}","post_depth.vs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\nlayout(location = 0) in highp vec3    _glesVertex;  \r\n//in vec3 _glesNormal;\r\n//uniform highp mat4 glstate_matrix_modelview;\r\nuniform highp mat4 glstate_matrix_mvp;      \r\n// out highp vec3 xlv_Normal;                \r\n       \r\nvoid main()                                     \r\n{        \r\n    // highp mat3 normalMat=mat3(\r\n    //     glstate_matrix_mvp[0],\r\n    //     glstate_matrix_mvp[1],\r\n    //     glstate_matrix_mvp[2]);\r\n\r\n    // xlv_Normal=normalMat * _glesNormal;\r\n    // xlv_Normal+=1.0;\r\n    // xlv_Normal*=0.5;\r\n\r\n    gl_Position = (glstate_matrix_mvp * vec4(_glesVertex,1.0));  \r\n}","quad.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nout highp vec2 xlv_TEXCOORD0;\r\n\r\nvoid main()\r\n{\r\n    highp vec4 tmpvar_1;\r\n    tmpvar_1.w = 1.0;\r\n    tmpvar_1.xyz = _glesVertex.xyz;\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n    #ifdef QUAD\r\n    gl_Position = vec4(_glesVertex.xy*2.0,_glesVertex.z,1.0);\r\n    #else\r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\r\n    #endif\r\n}","radial_blur.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D _MainTex;\r\nuniform lowp float _Level;\r\nuniform lowp float _CenterX;\r\nuniform lowp float _CenterY;\r\nin highp vec2 xlv_TEXCOORD0;\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    lowp vec2 center = vec2(_CenterX, _CenterY);// 这里为什么要加1.0？？？\r\n    lowp vec2 uv = xlv_TEXCOORD0 - center;\r\n    lowp vec3 tmp = vec3(0, 0, 0);\r\n    for (lowp float i = 0.0; i < 100.0; i++)// for循环只能用i与常量比较\r\n    {\r\n        if (i >= _Level) break;// 在这里跳出循环\r\n        tmp += texture(_MainTex, uv * (1.0 - 0.002 * i) + center).xyz;\r\n    }\r\n    lowp vec4 col = vec4(tmp.xyz / _Level, 1);\r\n    color = col;\r\n}","radial_blur.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Level('Level',Range(0,100))=20\",\r\n        \"_CenterX ('CenterX', Range(0.0,1.0))=0.5\",\r\n        \"_CenterY ('CenterY', Range(0.0,1.0))=0.5\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"radial_blur\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"radial_blur\"\r\n            }\r\n        ]\r\n    }\r\n}","separate_blur.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\n\r\nin highp vec2 uv;\r\nin highp vec4 uv01;\r\nin highp vec4 uv23;\r\nin highp vec4 uv45;\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 _color=vec4(0,0,0,0);\r\n    _color+=0.4*texture(_MainTex, uv.xy);\r\n    _color+=0.15*texture(_MainTex, uv01.xy);\r\n    _color+=0.15*texture(_MainTex, uv01.zw);\r\n    _color+=0.10*texture(_MainTex, uv23.xy);\r\n    _color+=0.10*texture(_MainTex, uv23.zw);\r\n    _color+=0.05*texture(_MainTex, uv45.xy);\r\n    _color+=0.05*texture(_MainTex, uv45.zw);\r\n\r\n    color = _color;\r\n}\r\n","separate_blur.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"sample_offsets('sample_offsets',Vector) = (0,1.0,0,-1.0)\",\r\n        \"_MainTex_TexelSize('MainTex_TexelSize',Vector) = (0.009765,0.009765,1024,1024)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"separate_blur\",\r\n                \"fs\": \"separate_blur\"\r\n            }\r\n        ]\r\n    }\r\n}","separate_blur.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp vec4 _MainTex_TexelSize;\r\nuniform highp vec4 sample_offsets;//采样偏移\r\n\r\nout highp vec2 uv;\r\nout highp vec4 uv01;\r\nout highp vec4 uv23;\r\nout highp vec4 uv45;\r\n\r\n\r\nvoid main()\r\n{\r\n    highp vec4 offset=sample_offsets*_MainTex_TexelSize.xyxy;\r\n\r\n    uv =vec2(_glesMultiTexCoord0.x,_glesMultiTexCoord0.y);\r\n\r\n    uv01=uv.xyxy+offset.xyxy*vec4(1,1,-1,-1);\r\n    uv23=uv.xyxy+offset.xyxy*vec4(1,1,-1,-1)*2.0;\r\n    uv45=uv.xyxy+offset.xyxy*vec4(1,1,-1,-1)*3.0;\r\n\r\n    gl_Position = vec4(_glesVertex.xy*2.0,_glesVertex.z,1.0);\r\n}","shadowmap.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\n\r\nuniform sampler2D _MainTex;\r\nuniform sampler2D _Light_Depth;\r\n\r\nuniform float _AlphaCut;\r\nuniform float _bias;//这个是根据视角算的。这里先偷个懒，外部传个固定值进来\r\n\r\nin highp vec2 xlv_TEXCOORD0;\r\nin highp vec4 _WorldPos;\r\n\r\n\r\nconst float UnpackDownscale = 255. / 256.; \r\nconst vec3 PackFactors = vec3(256. * 256. * 256., 256. * 256.,  256.);\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4(PackFactors, 1.);\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\nfloat unpackRGBAToDepth(const in vec4 v) \r\n{\r\n    return dot(v, UnpackFactors);\r\n}\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 tmpvar_3 = texture(_MainTex, xlv_TEXCOORD0);\r\n\r\n\tfloat shadowDepth = unpackRGBAToDepth(texture(_Light_Depth, _WorldPos.xy));\r\n    float worldDepth = (_WorldPos.z +1.)/2.;//不理解这里为啥要做变换。\r\n\r\n    float _depth = step(shadowDepth + _bias,worldDepth);\r\n    lowp vec4 temvar_4 = vec4(0.5,0.5,0.5,0) * _depth;\r\n\r\n    color = tmpvar_3 - temvar_4;\r\n}","shadowmap.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"shadowmap\",\r\n                \"fs\": \"shadowmap\",\r\n                \"zwrite\": \"on\",\r\n                \"ztest\": \"lequal\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","shadowmap.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4  _LightProjection;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform highp vec4 _MainTex_ST;  \r\n\r\nout highp vec2 xlv_TEXCOORD0;\r\nout highp vec4 _WorldPos;\r\n\r\nvoid main()\r\n{\r\n    highp vec4 tmpvar_1;\r\n    tmpvar_1.w = 1.0;\r\n    tmpvar_1.xyz = _glesVertex.xyz;\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;  \r\n\t_WorldPos = (_LightProjection * glstate_matrix_model * tmpvar_1);\r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\r\n}","simple.fs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform float _AlphaCut;\r\nuniform vec4 _MainColor;\r\n\r\nin vec2 xlv_TEXCOORD0;    \r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n\r\n    basecolor = basecolor * _MainColor;\r\n\r\n    #ifdef FOG\r\n    basecolor.xyz = mix(glstate_fog_color.rgb, basecolor.rgb, factor);\r\n    #endif\r\n        \r\n    color = basecolor;\r\n}","simple.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.1\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ]\r\n    }\r\n}","simple.vs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\nuniform vec4 _MainTex_ST;\r\n\r\nout lowp vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlowp mat4 blendMat ;\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 position = vec4(_glesVertex.xyz,1.0);\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\r\n    position = glstate_matrix_mvp * position;\r\n\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n    \r\n    gl_Position = position;\r\n}","skybox.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI          3.141592653589\r\n\r\nuniform samplerCube u_sky;\r\nuniform vec4        glstate_eyepos;\r\nuniform float       u_Exposure;\r\n\r\nin vec3        TexCoords;\r\n\r\nvec3 decoRGBE(vec4 r) {\r\n    if(r.a != 0.) {\r\n        float e = exp2(r.a * 255. - 128.);\r\n        return vec3(r.r * e, r.g * e, r.b * e);\r\n    }\r\n    return vec3(0);\r\n}\r\n\r\nvec3 toneMapACES(vec3 color) {\r\n    const float A = 2.51;\r\n    const float B = 0.03;\r\n    const float C = 2.43;\r\n    const float D = 0.59;\r\n    const float E = 0.14;\r\n    return pow(clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0), vec3(1.0 / 2.2));\r\n}\r\n\r\nout vec4 color; \r\nvoid main () {\r\n    color = vec4(toneMapACES(u_Exposure * decoRGBE(texture(u_sky, TexCoords))), 1.0);\r\n}","skybox.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"showface\": \"all\",\r\n                \"vs\": \"skybox\",\r\n                \"fs\": \"skybox\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"showface\": \"all\",\r\n                \"vs\": \"skybox\",\r\n                \"fs\": \"skybox\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","skybox.vs.glsl":"#version 300 es\r\n\r\n//参考 https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/06%20Cubemaps/\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\n\r\nuniform highp mat4      glstate_matrix_view;\r\nuniform highp mat4      glstate_matrix_project;\r\n\r\nout highp vec3      TexCoords;\r\n\r\nvoid main () {\r\n    vec3 cubePos = _glesVertex * -2.0;  //因我们的 默认box mesh size为1, 需要加系数 -2.0\r\n    TexCoords   = cubePos;\r\n    vec4 pos =  glstate_matrix_project * mat4(mat3(glstate_matrix_view))  * vec4(cubePos, 1.0);\r\n    gl_Position = pos.xyww;\r\n}","sssss.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D       _MainTex;//清晰图\r\nuniform sampler2D       _DepthTex;//清晰图\r\nuniform highp vec4      _MainTex_TexelSize;\r\n\r\nuniform highp vec4      _BlurDirection;\r\nuniform highp vec4      _BlurOptions;\r\n#define BLUR_WIDTH      _BlurOptions.a\r\n#define BLUR_W_RGB      _BlurOptions.rgb\r\n#define BLUR_W_RGBA     vec4(_BlurOptions.rgb, 1.0)\r\n\r\nin highp vec2      xlv_TEXCOORD0;   // 每个片元的纹素坐标\r\n\r\n#define DEPTH_CORRECTION 10000.\r\n\r\nconst float PackUpscale = 256. / 255.;\r\n// fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.;\r\n// 0..1 -> fraction (excluding 1)\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\n\r\n//texture2DEtC1Mark\r\n\r\nfloat unpackRGBAToDepth( const in vec4 v )\r\n{\r\n    return dot( v, UnpackFactors );\r\n}\r\n\r\nvec4 blur(vec2 _step) {\r\n    float w[6];\r\n    w[0] = 0.006;\r\n    w[1] = 0.061;\r\n    w[2] = 0.242;\r\n    w[3] = 0.242;\r\n    w[4] = 0.061;\r\n    w[5] = 0.006;\r\n\r\n    float o[6];\r\n    o[0] = -1.0;\r\n    o[1] = -0.6667;\r\n    o[2] = -0.3333;\r\n    o[3] = 0.3333;\r\n    o[4] = 0.6667;\r\n    o[5] = 1.0;\r\n    // Fetch color and depth for current pixel\r\n    vec4 curColor = texture(_MainTex, xlv_TEXCOORD0);\r\n    float curDepth = unpackRGBAToDepth(texture(_DepthTex, xlv_TEXCOORD0));\r\n    vec4 blur = curColor;\r\n    blur.rgb *= 0.382;\r\n    vec2 finalStep = curColor.a * _step;\r\n\r\n    for(int i = 0; i < 6; i++) {\r\n        vec2 offset = xlv_TEXCOORD0 + o[i] * finalStep;\r\n        vec3 color = texture(_MainTex, offset).rgb;\r\n        float depth = unpackRGBAToDepth(texture(_DepthTex, offset));\r\n\r\n        // if the difference in depth is huge, we mix color back to center color:\r\n        float s = min(abs(curDepth - depth) * DEPTH_CORRECTION, 1.0);\r\n        // if(abs(curDepth - depth) > 0.00001) // DEBUG\r\n        //     return vec4(1.0, 1.0, 1.0, 1.0);\r\n        color = mix(color, curColor.rgb, s);\r\n\r\n        blur.rgb += w[i] * color;\r\n    }\r\n    return blur;\r\n\r\n}\r\n\r\n\r\nout vec4 color; \r\nvoid main () {\r\n    vec4 _color = texture(_MainTex, xlv_TEXCOORD0);\r\n    vec4 cblur = blur(_MainTex_TexelSize.xy * _BlurDirection.xy * BLUR_WIDTH * 1.);\r\n    color = _color + cblur * BLUR_W_RGBA;\r\n\r\n}\r\n","sssss.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"sssss\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"sssss\"\r\n            }\r\n        ]\r\n    }\r\n}","sssss.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\n\r\nuniform highp mat4      glstate_matrix_mvp;\r\nuniform highp mat4      glstate_matrix_model;\r\nuniform highp mat4      glstate_matrix_world2object;\r\n\r\nout highp vec2      xlv_TEXCOORD0;\r\n\r\nvoid main () {\r\n    v_pos           = (glstate_matrix_model * vec4(_glesVertex, 1.0)).xyz;\r\n    v_normal        = normalize((glstate_matrix_world2object * vec4(_glesNormal, 0.0)).xyz);\r\n    xlv_TEXCOORD0   = _glesMultiTexCoord0;\r\n\r\n    gl_Position     = glstate_matrix_mvp * vec4(_glesVertex, 1.0);\r\n}","streamlight.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp sampler2D _LightTex;\r\nuniform lowp vec4 _LightColor;\r\nuniform lowp float _LightRate;\r\nuniform lowp sampler2D _MaskTex;\r\nuniform lowp float _AlphaCut;\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin mediump vec2 _StreamLightUV;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 emission = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(emission.a < _AlphaCut)\r\n        discard;\r\n\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    lowp vec4 light = texture(_LightTex, _StreamLightUV) * _LightColor * _LightRate;\r\n    lowp vec4 mask = texture(_MaskTex, xlv_TEXCOORD0);\r\n    light = min(light,mask);\r\n\r\n    emission.rgb += light.rgb;\r\n    color = emission;\r\n}","streamlight.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_LightTex('Light',Texture) = 'black' {}\",\r\n        \"_LightColor('LightColor',Color) = (1,1,1,1)\",\r\n        \"_LightRate('LightRate',Range(0.0,1.0)) = 1.0\",\r\n\t\t\"_SpeedU('SpeedU',float) = 0.5\",\r\n\t\t\"_SpeedV('SpeedV',float) = 0.5\",\r\n\t\t\"_MaskTex('Mask',Texture) = 'white' {}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ]\r\n    }\r\n}","streamlight.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform lowp float _SpeedU;\r\nuniform lowp float _SpeedV;\r\nuniform lowp float glstate_timer;\r\nuniform mediump vec4 _LightTex_ST;\r\nuniform mediump vec4 _MainTex_ST;\r\n\r\nout mediump vec2 xlv_TEXCOORD0;\r\nout mediump vec2 _StreamLightUV;\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4    _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    lowp vec2 _speed= vec2(_SpeedU,_SpeedV);\r\n    _StreamLightUV = (_glesMultiTexCoord0.xy * _LightTex_ST.xy + _LightTex_ST.zw)  + _speed * glstate_timer;\r\n\r\n    gl_Position =position;\r\n}","streamlight_bothside.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_LightTex('Light',Texture) = 'black' {}\",\r\n        \"_LightColor('LightColor',Color) = (1,1,1,1)\",\r\n        \"_LightRate('LightRate',Range(0.0,1.0)) = 1.0\",\r\n\t\t\"_SpeedU('SpeedU',float) = 0.5\",\r\n\t\t\"_SpeedV('SpeedV',float) = 0.5\",\r\n\t\t\"_MaskTex('Mask',Texture) = 'white' {}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }   \r\n        ]\r\n    }\r\n}","terrain.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _Splat0;\r\nuniform lowp sampler2D _Splat1;\r\nuniform lowp sampler2D _Splat2;\r\nuniform lowp sampler2D _Splat3;\r\nuniform lowp sampler2D _Control;\r\n\r\nin lowp vec2 xlv_TEXCOORD0;\r\nin lowp vec2 uv_Splat0;\r\nin lowp vec2 uv_Splat1;\r\nin lowp vec2 uv_Splat2;\r\nin lowp vec2 uv_Splat3;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 control = texture(_Control, xlv_TEXCOORD0);\r\n    lowp vec3 lay1 = texture(_Splat0,uv_Splat0).xyz;\r\n    lowp vec3 lay2 = texture(_Splat1,uv_Splat1).xyz;\r\n    lowp vec3 lay3 = texture(_Splat2,uv_Splat2).xyz;\r\n    lowp vec3 lay4 = texture(_Splat3,uv_Splat3).xyz;\r\n    lowp vec4 emission = vec4(lay1*control.r + lay2*control.g + lay3*control.b + lay4*(control.a),1.0);\r\n\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    color = emission;\r\n}","terrain.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_Splat0('Layer 1',Texture) = 'white'{}\",\r\n        \"_Splat1('layer 2',Texture) = 'white'{}\",\r\n        \"_Splat2('layer 3',Texture) = 'white'{}\",\r\n        \"_Splat3('layer 4',Texture) = 'white'{}\",\r\n        \"_Control('Control (RGBA)',Texture) = 'white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ],\r\n\t\t\"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ]\r\n    }\r\n}","terrain.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform lowp vec4 _Splat0_ST;\r\nuniform lowp vec4 _Splat1_ST;\r\nuniform lowp vec4 _Splat2_ST;\r\nuniform lowp vec4 _Splat3_ST;\r\n\r\nuniform lowp vec4 _HeightScale;\r\n\r\nout lowp vec2 xlv_TEXCOORD0;\r\nout lowp vec2 normalDir;\r\nout lowp vec2 uv_Splat0;\r\nout lowp vec2 uv_Splat1;\r\nout lowp vec2 uv_Splat2;\r\nout lowp vec2 uv_Splat3;\r\n\r\nout lowp vec2 v_texcoord1;\r\n\r\nout highp vec2 holdX;\r\n\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4    _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n\txlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n    uv_Splat0 = _glesMultiTexCoord0.xy * _Splat0_ST.xy + _Splat0_ST.zw;\r\n    uv_Splat1 = _glesMultiTexCoord0.xy * _Splat1_ST.xy + _Splat1_ST.zw;\r\n    uv_Splat2 = _glesMultiTexCoord0.xy * _Splat2_ST.xy + _Splat2_ST.zw;\r\n    uv_Splat3 = _glesMultiTexCoord0.xy * _Splat3_ST.xy + _Splat3_ST.zw;\r\n    // now v_texcoord1 just send world y to pixel shader, 36 is height map scale\r\n\tv_texcoord1 = vec2(position.y/_HeightScale.x, position.y/_HeightScale.x);\r\n    normalDir = vec2(_glesNormal.x, _glesNormal.z);\r\n\r\n    holdX.x = _glesVertex.x;\r\n    holdX.y = _glesVertex.x;\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start); \r\n    factor = clamp(factor, 0.0, 1.0);  \r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","terrain_rgb_control.fs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform lowp sampler2D _Splat0;\r\nuniform lowp sampler2D _Splat1;\r\nuniform lowp sampler2D _Splat2;\r\nuniform lowp sampler2D _Splat3;\r\nuniform lowp sampler2D _Control;\r\nuniform lowp vec4 v_useTextureOrGPU;\r\nuniform lowp float lineVertex[100];\r\n\r\nin lowp vec2 xlv_TEXCOORD0;\r\nin lowp vec2 normalDir;\r\nin lowp vec2 v_texcoord1;\r\n\r\nin lowp vec2 uv_Splat0;\r\nin lowp vec2 uv_Splat1;\r\nin lowp vec2 uv_Splat2;\r\nin lowp vec2 uv_Splat3;\r\n\r\nin highp vec2 holdX;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n\tlowp vec3 lay1 = texture(_Splat0,uv_Splat0).xyz;\r\n    lowp vec3 lay2 = texture(_Splat1,uv_Splat1).xyz;\r\n    lowp vec3 lay3 = texture(_Splat2,uv_Splat2).xyz;\r\n    lowp vec3 lay4 = texture(_Splat3,uv_Splat3).xyz;\r\n\r\n\tlowp vec2 height1DLookup = vec2(xlv_TEXCOORD0.x, 0.5);\r\n\tlowp vec2 layer1Lookup = vec2(xlv_TEXCOORD0.x, 0.21);\r\n\tlowp vec2 layer2Lookup = vec2(xlv_TEXCOORD0.x, 0.42);\r\n\tlowp vec2 layer3Lookup = vec2(xlv_TEXCOORD0.x, 0.63);\r\n\tlowp vec2 layer4Lookup = vec2(xlv_TEXCOORD0.x, 0.84);\r\n\r\n    lowp vec4 control1;\r\n\tlowp vec4 emission;\r\n\tlowp vec4 factor1;\r\n\tlowp vec4 layer1;\r\n\tlowp vec4 layer2;\r\n\tlowp vec4 layer3;\r\n\tlowp vec4 layer4;\r\n\r\n\tif(v_useTextureOrGPU.x < 1.0)\r\n\t{\r\n\t\tcontrol1 = texture(_Control, xlv_TEXCOORD0);\r\n\t\temission = vec4(lay1*control1.r + lay2*control1.g + lay3*control1.b + lay4*(1.0-length(control1.xyz)),1.0); \r\n\t}\r\n\telse\r\n\t{\r\n\t\tfactor1 = texture(_Control, height1DLookup);\r\n\t\tlayer1 = texture(_Control, layer1Lookup);\r\n\t\tlayer1 = layer1 * 2.0 - 1.0;\r\n\t\tlayer2 = texture(_Control, layer2Lookup);\r\n\t\tlayer2 = layer2 * 2.0 - 1.0;\r\n\t\tlayer3 = texture(_Control, layer3Lookup);\r\n\t\tlayer3 = layer3 * 2.0 - 1.0;\r\n\t\tlayer4 = texture(_Control, layer4Lookup);\r\n\t\tlayer4 = layer4 * 2.0 - 1.0;\r\n\r\n\t\tcontrol1 = vec4(0, 0, 0, 0);\r\n\r\n\t\t//drop in this segment\r\n\t\t//float currentY = (v1.y - v0.y)/(v1.x - v0.x) * deltaX;\r\n\t\tif(v_texcoord1.x < (0.21 + layer1.x * 0.01 +  factor1.x * v_useTextureOrGPU.z)* 0.7)\r\n\t\t{\r\n\t\t\tcontrol1.x = 1.0f;\r\n\t\t}\r\n\t\telse if(v_texcoord1.x < (0.21 + layer1.x * 0.01 +  factor1.x * v_useTextureOrGPU.z))\r\n\t\t{\r\n\t\t\tcontrol1.x = 1.0 - (v_texcoord1.x - (0.21 + layer1.x * 0.01 +  factor1.x * v_useTextureOrGPU.z) * 0.7)/((0.21 + layer1.x * 0.01 +  factor1.x * v_useTextureOrGPU.z) * 0.3);\r\n\t\t\tcontrol1.y = (v_texcoord1.x - (0.21 + layer1.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7)/((0.21 + layer1.x * 0.01 +  factor1.x * v_useTextureOrGPU.z) * 0.3);\r\n\t\t}\r\n\t\telse if(v_texcoord1.x < (0.21 + 0.21 + layer2.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7)\r\n\t\t{\r\n\t\t\tcontrol1.y = 1.0;\r\n\t\t}\r\n\t\telse if(v_texcoord1.x < (0.21 + 0.21 + layer2.x* 0.01 + factor1.x * v_useTextureOrGPU.z))\r\n\t\t{\r\n\t\t\tcontrol1.y = 1.0 - (v_texcoord1.x - (0.21 + 0.21 + layer2.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7)/((0.21 + 0.21 + layer2.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.3);\r\n\t\t\tcontrol1.z = (v_texcoord1.x - (0.21 + 0.21 + layer2.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7)/((0.21 + 0.21 + layer2.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.3);\r\n\t\t}\r\n\t\telse if(v_texcoord1.x < (0.21 + 0.21 + 0.21 + layer3.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7)\r\n\t\t{\r\n\t\t\tcontrol1.z = 1.0;\r\n\t\t}\r\n\t\telse if(v_texcoord1.x < (0.21 + 0.21 + 0.21 + layer3.x* 0.01 + factor1.x * v_useTextureOrGPU.z))\r\n\t\t{\r\n\t\t\tcontrol1.z = 1.0 - (v_texcoord1.x - ((0.21 + 0.21 + 0.21 + layer3.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7))/((0.21 + 0.21 + 0.21 + layer3.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.3);\r\n\t\t\tcontrol1.w = (v_texcoord1.x - ((0.21 + 0.21 + 0.21 + layer3.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.7))/((0.21 + 0.21 + 0.21 + layer3.x * 0.01 + factor1.x * v_useTextureOrGPU.z) * 0.3);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcontrol1.w = 1.0;\r\n\t\t}\r\n\t\tfloat lengthPow = sqrt(control1.x * control1.x + control1.y * control1.y + control1.z * control1.z + control1.w * control1.w);\r\n\t\tcontrol1.x /=lengthPow;\r\n\t\tcontrol1.y /=lengthPow;\r\n\t\tcontrol1.z /=lengthPow;\r\n\t\tcontrol1.w /=lengthPow;\r\n\t\temission = vec4(lay1.xyz*control1.x + lay2.xyz*control1.y + lay3.xyz*control1.z + lay4.xyz*control1.w, 1.0); \r\n\t}\r\n\r\n\t\r\n\t#ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    color = emission;\r\n}","terrain_rgb_control.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_Splat0('Layer 1',Texture) = 'white'{}\",\r\n        \"_Splat1('layer 2',Texture) = 'white'{}\",\r\n        \"_Splat2('layer 3',Texture) = 'white'{}\",\r\n        \"_Splat3('layer 4',Texture) = 'white'{}\",\r\n        \"_Control('Control (RGBA)',Texture) = 'white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain_rgb_control\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain_rgb_control\"\r\n            }\r\n        ],\r\n\t\t\"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain_rgb_control\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain_rgb_control\"\r\n            }\r\n        ]\r\n    }\r\n}","testtexuv.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform lowp float _AlphaCut;\r\nin highp vec2 xlv_TEXCOORD0;\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec3 tmpvar_3 = vec3(xlv_TEXCOORD0.y);\r\n    color = vec4(tmpvar_3,1.0);\r\n}","testtexuv.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"testtexuv\",\r\n                \"fs\": \"testtexuv\",\r\n                \"zwrite\":\"on\",\r\n                \"ztest\":\"lequal\"\r\n            }\r\n        ]\r\n    }\r\n}","testtexuv.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nout highp vec2 xlv_TEXCOORD0;\r\nvoid main()\r\n{\r\n    highp vec4 tmpvar_1;\r\n    tmpvar_1.w = 1.0;\r\n    tmpvar_1.xyz = _glesVertex.xyz;\r\n\txlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\r\n}","transparent.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;                                                                                                \r\nin highp vec2 xlv_TEXCOORD0;\r\nuniform lowp float _Alpha;\r\nuniform lowp float _Superimposition;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 emission = texture(_MainTex, xlv_TEXCOORD0);\r\n    emission.a=emission.a*_Alpha;\r\n    emission.xyz *= _Superimposition;\r\n    //----------------------------------------------------------\r\n    #ifdef FOG\r\n    emission.xyz= mix(glstate_fog_color.xyz, emission.xyz, factor);\r\n    #endif\r\n    color = emission;\r\n\r\n}","transparent.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Alpha('Alpha', Range(0.0, 1.0)) = 1.0\",\r\n        \"_Superimposition('Superimposition', Range(0.0, 7.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"instance\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"instance_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","transparent.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\n\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef INSTANCE\r\n//instance_matrix 固定地址\r\nlayout(location = 12) in highp mat4 instance_matrix;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\r\n\t#ifdef INSTANCE\r\n        position = instance_matrix * position;\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","transparent_particles_standard.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\n\r\nuniform vec4 u_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nuniform float _EmissionSaturation;\r\nuniform float _OpacitySaturation;\r\nuniform float _ColorMultiplier;\r\n\r\nuniform float COLOR_RAMP;\r\nuniform sampler2D _ColorRamp;\r\nuniform vec4 _ColorRamp_ST;\r\nuniform float COLOR_TINT;\r\nuniform vec4 _BasicColor;\r\nuniform vec4 _SaturatedColor;\r\n\r\nuniform float DISSOLVE_ENABLED;\r\nuniform vec4 _DissolveStep;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform sampler2D _NoiseTex;\r\nuniform vec4 _TintColor;\r\n\r\nuniform float EMISSIVEPOWER;\r\nuniform float _EmissivePower;\r\n\r\nuniform float _ABOffset;\r\n\r\nuniform float _GlobalAlpha;\r\n\r\nin vec2 v_uv;\r\nin vec4 v_color;\r\n\r\nin vec2 v_particledata;\r\nin vec2 v_noiseuv;\r\n\r\nuniform float APPLY_RGB_COLOR_VERTEX;\r\nuniform float NOISE_TEXTURE_EMISSION;\r\nuniform float NOISE_TEXTURE_ALPHA;\r\nuniform float NOISE_TEXTURE_DISSOLVE;\r\n\r\nuniform float BlendMode;\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    vec4 tex = texture(_MainTex, v_uv);\r\n\r\n    vec4 col = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    vec4 vcolor = vec4(1.0, 1.0, 1.0, v_color.w);\r\n\r\n    if( EXTENDED_PARTICLES > 0.5 )\r\n    {\r\n        if( APPLY_RGB_COLOR_VERTEX > 0.5)\r\n        {\r\n            vcolor = v_color;\r\n        }\r\n\r\n        float nEmission = 1.0;\r\n        float nAlpha = 1.0;\r\n        float nDissolve = 1.0;\r\n        \r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            vec3 noise = texture(_NoiseTex, v_noiseuv).xyz;\r\n        \r\n            if( NOISE_TEXTURE_EMISSION > 0.5)\r\n            {\r\n                nEmission = noise.x;\r\n            }\r\n            else\r\n            {\r\n                nEmission = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_ALPHA > 0.5)\r\n            {\r\n                nAlpha = noise.y;\r\n            }\r\n            else\r\n            {\r\n                nAlpha = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_DISSOLVE > 0.5)\r\n            {\r\n                nDissolve = noise.z;\r\n            }\r\n            else\r\n            {\r\n                nDissolve = 1.0;\r\n            }\r\n        }\r\n    \r\n        if( DISSOLVE_ENABLED > 0.5)\r\n        {\r\n            float ramp = -1.0 + (v_particledata.x * 2.0);\r\n            col.a = clamp(tex.g * smoothstep(_DissolveStep.x, _DissolveStep.y, (tex.b + ramp) * nDissolve) * _OpacitySaturation * vcolor.w * nAlpha, 0.0, 1.0);\r\n        }\r\n        else\r\n        {\r\n            col.a = clamp(tex.g * _OpacitySaturation * vcolor.w, 0.0, 1.0) * nAlpha;\r\n        }\r\n    \r\n        float lerpValue = 0.0;\r\n        if(COLOR_TINT < 0.5)\r\n        {\r\n            lerpValue = clamp(tex.r * v_particledata.y * _ColorMultiplier * nEmission, 0.0, 1.0);\r\n        }\r\n    \r\n        if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5)\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * _EmissionSaturation;\r\n                }\r\n            }\r\n            col.a *= _GlobalAlpha;\r\n        }\r\n        else\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * col.a * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5 )\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation * col.a;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * col.a * _EmissionSaturation;\r\n                }\r\n            }\r\n            col *= _GlobalAlpha;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if( 3.5 < BlendMode && BlendMode < 4.5 ) //4\r\n        {\r\n            tex *= _TintColor;\r\n            float luminance = clamp(dot(tex, vec4(0.2126, 0.7152, 0.0722, 0.0)) * tex.a * _ABOffset, 0.0, 1.0);\r\n            vec4 one = vec4(1, 1, 1, 1);\r\n            col = mix(2.0 * (v_color * tex), one - 2.0 * (one - v_color) * (one - tex), luminance);\r\n        }\r\n        else\r\n        {\r\n            col = v_color * tex;\r\n            col *= _TintColor;\r\n        \r\n            if( EMISSIVEPOWER > 0.5)\r\n            {\r\n                col *= _EmissivePower;\r\n            }\r\n            \r\n            if( 0.5 < BlendMode && BlendMode < 1.5 ) //1\r\n            {\r\n                col.rgb *= col.a;\r\n            }\r\n            else\r\n            {\r\n                if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n                {\r\n                    col *= 2.0;\r\n                }\r\n                else\r\n                {\r\n                    if( 1.5 < BlendMode && BlendMode < 2.5 ) //2\r\n                    {\r\n                        col *= 4.0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        col *= _GlobalAlpha;\r\n\r\n    }\r\n\r\n    color = col;\r\n}","transparent_particles_standard.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_BasicColor('Basic Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_SaturatedColor('Saturated Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n\r\n    \"_MainTex('Particle Texture',Texture)='white'{}\",\r\n    \"_ColorRamp('Color Ramp', Texture) = 'white' {}\",\r\n    \"_NoiseTex('Noise Texture', Texture) = 'white' {}\",\r\n\r\n    \"_EmissionSaturation('Emission saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_OpacitySaturation('Opacity saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ColorMultiplier('Color multiplier', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ABOffset('Alpha blend offset', Range(0.0, 8.0)) = 0.0\",\r\n    \r\n    \"_DissolveStep('DissolveStep.xy', Vector) = (0.0, 1.0, 0.0, 0.0)\",\r\n    \r\n    \"_Panning('Automatic Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_GlobalAlpha('Global alpha', float) = 1.0\",\r\n    \r\n    \"_EmissivePower('Emissive Power', Range(1.0, 4.0)) = 1.0\",\r\n    \"_NoisePanning('Noise Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n    \r\n    \"COLOR_RAMP('COLOR_RAMP', float) = 0.0\",\r\n    \"COLOR_TINT('COLOR_TINT', float) = 0.0\",\r\n    \"APPLY_RGB_COLOR_VERTEX('APPLY_RGB_COLOR_VERTEX', float) = 0.0\",\r\n    \"DISSOLVE_ENABLED('DISSOLVE_ENABLED', float) = 0.0\",\r\n    \"AUTOMATICPANNING('AUTOMATICPANNING', float) = 0.0\",\r\n    \"EMISSIVEPOWER('EMISSIVEPOWER', float) = 0.0\",\r\n    \"EXTENDED_PARTICLES('EXTENDED_PARTICLES', float) = 0.0\",\r\n    \"NOISE_TEXTURE('NOISE_TEXTURE', float) = 0.0\",\r\n    \"NOISE_TEXTURE_EMISSION('NOISE_TEXTURE_EMISSION', float) = 0.0\",\r\n    \"NOISE_TEXTURE_ALPHA('NOISE_TEXTURE_ALPHA', float) = 0.0\",\r\n    \"NOISE_TEXTURE_DISSOLVE('NOISE_TEXTURE_DISSOLVE', float) = 0.0\",\r\n    \"NOISEUV('NOISEUV', float) = 0.0\",\r\n    \"FLOWMAP('FLOWMAP', float) = 0.0\",\r\n    \"BlendMode('BlendMode', float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"transparent_particles_standard\",\r\n        \"fs\": \"transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"transparent_particles_standard\",\r\n        \"fs\": \"transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","transparent_particles_standard.vs.glsl":"#version 300 es\r\n\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform vec4 _Panning;\r\nuniform float glstate_timer;\r\n\r\nuniform vec4 _NoiseTex_ST;\r\nuniform vec4 _NoisePanning;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nout vec2 v_uv;\r\nout vec4 v_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nout vec2 v_particledata;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform float NOISEUV;\r\nout vec2 v_noiseuv;\r\n\r\nvoid main() \r\n{\r\n    vec3 position = _glesVertex;\r\n    gl_Position = glstate_matrix_mvp * vec4(position, 1.0);\r\n    v_uv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_Panning.xy * glstate_timer);\r\n    v_color = _glesColor;\r\n    // v_color = vec4(1.0,1.0,1.0,1.0);\r\n\r\n    if(EXTENDED_PARTICLES > 0.5)\r\n    {\r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            if( NOISEUV > 0.5)\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _NoiseTex_ST.xy + _NoiseTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n            else\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // v_particledata = _glesMultiTexCoord0.zw;\r\n        v_particledata = _glesMultiTexCoord0;\r\n    }\r\n}","vignetting.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D       _MainTex;//清晰图\r\nuniform sampler2D       _BlurTex;//模糊高光的图\r\nuniform highp vec4      _MainTex_TexelSize;\r\n\r\nuniform highp float     _Vignetting;\r\nuniform highp float     _Blurred_Corners;\r\nuniform highp float     _Blur_Distance;\r\nuniform highp float     _Chromatic_Aberration;\r\n\r\nin highp vec2      xlv_TEXCOORD0;   // 每个片元的纹素坐标\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\nvec2 adjustUV(vec2 uv) {\r\n    if(uv.x > 1.0) {\r\n        uv.x = 2.0 - uv.x;\r\n    } else if(uv.x < 0.0) {\r\n        uv.x = abs(uv.x);\r\n    }\r\n    if(uv.y > 1.0) {\r\n        uv.y = 2.0 - uv.y;\r\n    } else if(uv.y < 0.0) {\r\n        uv.y = abs(uv.y);\r\n    }\r\n    return uv;\r\n}\r\n\r\nout vec4 color; \r\nvoid main () {\r\n    float dist = distance(xlv_TEXCOORD0, vec2(0.5));\r\n    // NOTE Unity Parameters:\r\n    float Vignetting;\r\n    if(_Vignetting > 0.0) {\r\n        Vignetting = min(dist/(1.0-_Vignetting), 1.0);\r\n    } else {\r\n        Vignetting = _Vignetting;\r\n    }\r\n    float Blurred_Corners = min(dist * _Blurred_Corners, 1.0);\r\n    // vec2 Blur_Distance = vec2(Blur_Distance);\r\n    float Chromatic_Aberration = _Chromatic_Aberration;\r\n\r\n    vec2 direction = xlv_TEXCOORD0 - 0.5;\r\n\r\n// offset\r\n    vec2 r_uv = adjustUV(xlv_TEXCOORD0 - direction * direction * 0.01 * Chromatic_Aberration);\r\n    vec2 b_uv = adjustUV(xlv_TEXCOORD0 + direction * direction * 0.01 * Chromatic_Aberration);\r\n\r\n    float base_r = texture(_MainTex, r_uv).r;\r\n    float base_b = texture(_MainTex, b_uv).b;\r\n\r\n    vec4 base_color = texture(_MainTex, xlv_TEXCOORD0);\r\n\r\n    float blur_r = texture(_BlurTex, r_uv).r;\r\n    float blur_b = texture(_BlurTex, b_uv).b;\r\n\r\n    vec4 blur_color = texture(_BlurTex, xlv_TEXCOORD0);\r\n\r\n    float ch_r = mix(base_r, blur_r, Blurred_Corners);\r\n    float ch_b = mix(base_b, blur_b, Blurred_Corners);\r\n\r\n    vec4 _color = mix(base_color, blur_color, Blurred_Corners);\r\n\r\n    vec4 aberration = vec4(ch_r, _color.g, ch_b, 1.0);\r\n    vec4 dark = vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    color = mix(aberration, dark, Vignetting);\r\n    // color = vec4(vec3(Blurred_Corners), 1.0);\r\n\r\n}\r\n","vignetting.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_bloomFactor('bloomFactor',Range(0.0,1.0)) = 2.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"vignetting\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"vignetting\"\r\n            }\r\n        ]\r\n    }\r\n}"}